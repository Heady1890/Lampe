
Lampe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000f16  00000faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  0080011c  0080011c  00000fc6  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003db  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b12  00000000  00000000  00001441  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045d  00000000  00000000  00001f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ed  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00002da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038c  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c1  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000356d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	8d c5       	rjmp	.+2842   	; 0xb36 <__vector_13>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	9e c3       	rjmp	.+1852   	; 0x75e <__vector_16>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e1       	ldi	r30, 0x16	; 22
  48:	ff e0       	ldi	r31, 0x0F	; 15
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	ac 31       	cpi	r26, 0x1C	; 28
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	12 e0       	ldi	r17, 0x02	; 2
  58:	ac e1       	ldi	r26, 0x1C	; 28
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a5 33       	cpi	r26, 0x35	; 53
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	02 d0       	rcall	.+4      	; 0x6c <main>
  68:	54 c7       	rjmp	.+3752   	; 0xf12 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <main>:
#include "pwm_generator.h"
#include "color_calculator.h"
#include "fader.h"

int main(void) {
  init_pwm();
  6c:	10 d6       	rcall	.+3104   	; 0xc8e <init_pwm>
  init_fader();
  6e:	9f d3       	rcall	.+1854   	; 0x7ae <init_fader>
  //	V=100, 30% duty und  23mA
  //	V=255, 71% duty und 597mA
  //runHSV(0,4095,4095);	//rot
  //runHSV(1320,4095,4095);	//grün
  //runHSV(2640,4095,4095);	//blau
  runHSV(0,0,1000);		//weiß
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	60 e0       	ldi	r22, 0x00	; 0
  76:	70 e0       	ldi	r23, 0x00	; 0
  78:	48 ee       	ldi	r20, 0xE8	; 232
  7a:	53 e0       	ldi	r21, 0x03	; 3
  7c:	fc d3       	rcall	.+2040   	; 0x876 <runHSV>
  setSlot(anim2);
  HSV_anim anim3 = {0,0,1010,0,0,-1000,100};
  setSlot(anim3);
  runProgram();*/

  sei();
  7e:	78 94       	sei
  while(1){
    faderThread();
  80:	98 d4       	rcall	.+2352   	; 0x9b2 <faderThread>
  82:	97 d4       	rcall	.+2350   	; 0x9b2 <faderThread>
  84:	fd cf       	rjmp	.-6      	; 0x80 <main+0x14>

00000086 <init_color>:


/* FUNCTIONS */
void init_color(){
  
}
  86:	08 95       	ret

00000088 <HSVtoRGBW>:

	1 Grad = 0,7111 Bit

	Berechnung dauert 168Zyklen@O2 und genau 21us@8Mhz
*/
RGBW HSVtoRGBW(uint16_t h, uint16_t s, uint16_t v) {
  88:	2f 92       	push	r2
  8a:	3f 92       	push	r3
  8c:	4f 92       	push	r4
  8e:	5f 92       	push	r5
  90:	6f 92       	push	r6
  92:	7f 92       	push	r7
  94:	8f 92       	push	r8
  96:	9f 92       	push	r9
  98:	af 92       	push	r10
  9a:	bf 92       	push	r11
  9c:	cf 92       	push	r12
  9e:	df 92       	push	r13
  a0:	ef 92       	push	r14
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	df 93       	push	r29
  aa:	cf 93       	push	r28
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	2f 97       	sbiw	r28, 0x0f	; 15
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
  bc:	9c 01       	movw	r18, r24
  be:	2b 01       	movw	r4, r22
  c0:	fa 01       	movw	r30, r20
  //float h_f = h/0xFFF,s_f=s/0xFFF,v_f=;
  r=g=b=v;
  c2:	50 93 2e 01 	sts	0x012E, r21
  c6:	40 93 2d 01 	sts	0x012D, r20
  ca:	50 93 4f 01 	sts	0x014F, r21
  ce:	40 93 4e 01 	sts	0x014E, r20
  d2:	50 93 5c 01 	sts	0x015C, r21
  d6:	40 93 5b 01 	sts	0x015B, r20

  //TODO: checken ob notwendig
  if(h>3959) 
  da:	4f e0       	ldi	r20, 0x0F	; 15
  dc:	88 37       	cpi	r24, 0x78	; 120
  de:	94 07       	cpc	r25, r20
  e0:	20 f0       	brcs	.+8      	; 0xea <HSVtoRGBW+0x62>
    h=h%3960;
  e2:	68 e7       	ldi	r22, 0x78	; 120
  e4:	7f e0       	ldi	r23, 0x0F	; 15
  e6:	c4 d6       	rcall	.+3464   	; 0xe70 <__udivmodhi4>
  e8:	9c 01       	movw	r18, r24

  i2 = h / 660;
  ea:	c9 01       	movw	r24, r18
  ec:	64 e9       	ldi	r22, 0x94	; 148
  ee:	72 e0       	ldi	r23, 0x02	; 2
  f0:	bf d6       	rcall	.+3454   	; 0xe70 <__udivmodhi4>
  f2:	36 2e       	mov	r3, r22
  f4:	60 93 50 01 	sts	0x0150, r22
  f = h % 660;
  f8:	c9 01       	movw	r24, r18
  fa:	64 e9       	ldi	r22, 0x94	; 148
  fc:	72 e0       	ldi	r23, 0x02	; 2
  fe:	b8 d6       	rcall	.+3440   	; 0xe70 <__udivmodhi4>
 100:	6c 01       	movw	r12, r24
 102:	90 93 4d 01 	sts	0x014D, r25
 106:	80 93 4c 01 	sts	0x014C, r24
  p = w = (long)v*(4095-s)/4096;
 10a:	4f 01       	movw	r8, r30
 10c:	aa 24       	eor	r10, r10
 10e:	bb 24       	eor	r11, r11
 110:	6f ef       	ldi	r22, 0xFF	; 255
 112:	7f e0       	ldi	r23, 0x0F	; 15
 114:	64 19       	sub	r22, r4
 116:	75 09       	sbc	r23, r5
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	a5 01       	movw	r20, r10
 11e:	94 01       	movw	r18, r8
 120:	88 d6       	rcall	.+3344   	; 0xe32 <__mulsi3>
 122:	dc 01       	movw	r26, r24
 124:	cb 01       	movw	r24, r22
 126:	3c e0       	ldi	r19, 0x0C	; 12
 128:	b5 95       	asr	r27
 12a:	a7 95       	ror	r26
 12c:	97 95       	ror	r25
 12e:	87 95       	ror	r24
 130:	3a 95       	dec	r19
 132:	d1 f7       	brne	.-12     	; 0x128 <HSVtoRGBW+0xa0>
 134:	8b 87       	std	Y+11, r24	; 0x0b
 136:	9c 87       	std	Y+12, r25	; 0x0c
 138:	ad 87       	std	Y+13, r26	; 0x0d
 13a:	be 87       	std	Y+14, r27	; 0x0e
 13c:	9a 87       	std	Y+10, r25	; 0x0a
 13e:	89 87       	std	Y+9, r24	; 0x09
 140:	ab 85       	ldd	r26, Y+11	; 0x0b
 142:	bc 85       	ldd	r27, Y+12	; 0x0c
 144:	b0 93 52 01 	sts	0x0152, r27
 148:	a0 93 51 01 	sts	0x0151, r26
 14c:	a0 e0       	ldi	r26, 0x00	; 0
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	80 93 48 01 	sts	0x0148, r24
 154:	90 93 49 01 	sts	0x0149, r25
 158:	a0 93 4a 01 	sts	0x014A, r26
 15c:	b0 93 4b 01 	sts	0x014B, r27
  q = (v*((2698605L-(long)s*f)/659))/4096;
 160:	66 24       	eor	r6, r6
 162:	77 24       	eor	r7, r7
 164:	b6 01       	movw	r22, r12
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a3 01       	movw	r20, r6
 16c:	92 01       	movw	r18, r4
 16e:	61 d6       	rcall	.+3266   	; 0xe32 <__mulsi3>
 170:	2d e6       	ldi	r18, 0x6D	; 109
 172:	e2 2e       	mov	r14, r18
 174:	2d e2       	ldi	r18, 0x2D	; 45
 176:	f2 2e       	mov	r15, r18
 178:	29 e2       	ldi	r18, 0x29	; 41
 17a:	02 2f       	mov	r16, r18
 17c:	11 2d       	mov	r17, r1
 17e:	a8 01       	movw	r20, r16
 180:	97 01       	movw	r18, r14
 182:	26 1b       	sub	r18, r22
 184:	37 0b       	sbc	r19, r23
 186:	48 0b       	sbc	r20, r24
 188:	59 0b       	sbc	r21, r25
 18a:	ca 01       	movw	r24, r20
 18c:	b9 01       	movw	r22, r18
 18e:	23 e9       	ldi	r18, 0x93	; 147
 190:	32 e0       	ldi	r19, 0x02	; 2
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	80 d6       	rcall	.+3328   	; 0xe98 <__divmodsi4>
 198:	ca 01       	movw	r24, r20
 19a:	b9 01       	movw	r22, r18
 19c:	a5 01       	movw	r20, r10
 19e:	94 01       	movw	r18, r8
 1a0:	48 d6       	rcall	.+3216   	; 0xe32 <__mulsi3>
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e1       	ldi	r19, 0x10	; 16
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	76 d6       	rcall	.+3308   	; 0xe98 <__divmodsi4>
 1ac:	22 2e       	mov	r2, r18
 1ae:	3f 87       	std	Y+15, r19	; 0x0f
 1b0:	20 93 63 01 	sts	0x0163, r18
 1b4:	30 93 64 01 	sts	0x0164, r19
 1b8:	40 93 65 01 	sts	0x0165, r20
 1bc:	50 93 66 01 	sts	0x0166, r21
  t = ((long)v*((((long)2698605-(long)s*(659-f)))/659))/4096;
 1c0:	63 e9       	ldi	r22, 0x93	; 147
 1c2:	72 e0       	ldi	r23, 0x02	; 2
 1c4:	6c 19       	sub	r22, r12
 1c6:	7d 09       	sbc	r23, r13
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	a3 01       	movw	r20, r6
 1ce:	92 01       	movw	r18, r4
 1d0:	30 d6       	rcall	.+3168   	; 0xe32 <__mulsi3>
 1d2:	e6 1a       	sub	r14, r22
 1d4:	f7 0a       	sbc	r15, r23
 1d6:	08 0b       	sbc	r16, r24
 1d8:	19 0b       	sbc	r17, r25
 1da:	c8 01       	movw	r24, r16
 1dc:	b7 01       	movw	r22, r14
 1de:	23 e9       	ldi	r18, 0x93	; 147
 1e0:	32 e0       	ldi	r19, 0x02	; 2
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	58 d6       	rcall	.+3248   	; 0xe98 <__divmodsi4>
 1e8:	ca 01       	movw	r24, r20
 1ea:	b9 01       	movw	r22, r18
 1ec:	a5 01       	movw	r20, r10
 1ee:	94 01       	movw	r18, r8
 1f0:	20 d6       	rcall	.+3136   	; 0xe32 <__mulsi3>
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e1       	ldi	r19, 0x10	; 16
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	4e d6       	rcall	.+3228   	; 0xe98 <__divmodsi4>
 1fc:	30 93 2c 01 	sts	0x012C, r19
 200:	20 93 2b 01 	sts	0x012B, r18
  //t    = ((long)v*(((long)2698605-(long)s*(659-f)))/659)/4096;

  switch (i2){
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	38 16       	cp	r3, r24
 208:	09 f4       	brne	.+2      	; 0x20c <HSVtoRGBW+0x184>
 20a:	7f c0       	rjmp	.+254    	; 0x30a <HSVtoRGBW+0x282>
 20c:	83 15       	cp	r24, r3
 20e:	98 f4       	brcc	.+38     	; 0x236 <HSVtoRGBW+0x1ae>
 210:	a4 e0       	ldi	r26, 0x04	; 4
 212:	3a 16       	cp	r3, r26
 214:	09 f4       	brne	.+2      	; 0x218 <HSVtoRGBW+0x190>
 216:	6e c0       	rjmp	.+220    	; 0x2f4 <HSVtoRGBW+0x26c>
 218:	3a 16       	cp	r3, r26
 21a:	08 f0       	brcs	.+2      	; 0x21e <HSVtoRGBW+0x196>
 21c:	5b c0       	rjmp	.+182    	; 0x2d4 <HSVtoRGBW+0x24c>
    case 0:        g = t; b = p;  break;
    case 1: r = q;        b = p;  break;
    case 2: r = p;        b = t;  break;
    case 3: r = p; g = q;         break;      
 21e:	ab 85       	ldd	r26, Y+11	; 0x0b
 220:	bc 85       	ldd	r27, Y+12	; 0x0c
 222:	b0 93 5c 01 	sts	0x015C, r27
 226:	a0 93 5b 01 	sts	0x015B, r26
 22a:	9f 85       	ldd	r25, Y+15	; 0x0f
 22c:	20 92 4e 01 	sts	0x014E, r2
 230:	90 93 4f 01 	sts	0x014F, r25
 234:	11 c0       	rjmp	.+34     	; 0x258 <HSVtoRGBW+0x1d0>
  p = w = (long)v*(4095-s)/4096;
  q = (v*((2698605L-(long)s*f)/659))/4096;
  t = ((long)v*((((long)2698605-(long)s*(659-f)))/659))/4096;
  //t    = ((long)v*(((long)2698605-(long)s*(659-f)))/659)/4096;

  switch (i2){
 236:	33 20       	and	r3, r3
 238:	09 f4       	brne	.+2      	; 0x23c <HSVtoRGBW+0x1b4>
 23a:	41 c0       	rjmp	.+130    	; 0x2be <HSVtoRGBW+0x236>
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	39 16       	cp	r3, r25
 240:	59 f4       	brne	.+22     	; 0x258 <HSVtoRGBW+0x1d0>
    case 0:        g = t; b = p;  break;
    case 1: r = q;        b = p;  break;
 242:	9f 85       	ldd	r25, Y+15	; 0x0f
 244:	20 92 5b 01 	sts	0x015B, r2
 248:	90 93 5c 01 	sts	0x015C, r25
 24c:	2b 85       	ldd	r18, Y+11	; 0x0b
 24e:	3c 85       	ldd	r19, Y+12	; 0x0c
 250:	30 93 2e 01 	sts	0x012E, r19
 254:	20 93 2d 01 	sts	0x012D, r18
    case 4: r = t; g = p;         break;        
    case 5:        g = p; b = q;  break;
  }


  RGBW newRGBW = {r,g,b,w};
 258:	20 91 5b 01 	lds	r18, 0x015B
 25c:	30 91 5c 01 	lds	r19, 0x015C
 260:	40 91 4e 01 	lds	r20, 0x014E
 264:	90 91 4f 01 	lds	r25, 0x014F
 268:	60 91 2d 01 	lds	r22, 0x012D
 26c:	80 91 2e 01 	lds	r24, 0x012E
  return newRGBW;
 270:	a9 85       	ldd	r26, Y+9	; 0x09
 272:	ba 85       	ldd	r27, Y+10	; 0x0a
 274:	b8 87       	std	Y+8, r27	; 0x08
 276:	af 83       	std	Y+7, r26	; 0x07
 278:	6d 83       	std	Y+5, r22	; 0x05
 27a:	8e 83       	std	Y+6, r24	; 0x06
 27c:	4b 83       	std	Y+3, r20	; 0x03
 27e:	9c 83       	std	Y+4, r25	; 0x04
 280:	29 83       	std	Y+1, r18	; 0x01
 282:	3a 83       	std	Y+2, r19	; 0x02
 284:	59 2f       	mov	r21, r25
 286:	78 2f       	mov	r23, r24
}
 288:	89 85       	ldd	r24, Y+9	; 0x09
 28a:	98 85       	ldd	r25, Y+8	; 0x08
 28c:	2f 96       	adiw	r28, 0x0f	; 15
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	7f 90       	pop	r7
 2b2:	6f 90       	pop	r6
 2b4:	5f 90       	pop	r5
 2b6:	4f 90       	pop	r4
 2b8:	3f 90       	pop	r3
 2ba:	2f 90       	pop	r2
 2bc:	08 95       	ret
  q = (v*((2698605L-(long)s*f)/659))/4096;
  t = ((long)v*((((long)2698605-(long)s*(659-f)))/659))/4096;
  //t    = ((long)v*(((long)2698605-(long)s*(659-f)))/659)/4096;

  switch (i2){
    case 0:        g = t; b = p;  break;
 2be:	30 93 4f 01 	sts	0x014F, r19
 2c2:	20 93 4e 01 	sts	0x014E, r18
 2c6:	eb 85       	ldd	r30, Y+11	; 0x0b
 2c8:	fc 85       	ldd	r31, Y+12	; 0x0c
 2ca:	f0 93 2e 01 	sts	0x012E, r31
 2ce:	e0 93 2d 01 	sts	0x012D, r30
 2d2:	c2 cf       	rjmp	.-124    	; 0x258 <HSVtoRGBW+0x1d0>
  p = w = (long)v*(4095-s)/4096;
  q = (v*((2698605L-(long)s*f)/659))/4096;
  t = ((long)v*((((long)2698605-(long)s*(659-f)))/659))/4096;
  //t    = ((long)v*(((long)2698605-(long)s*(659-f)))/659)/4096;

  switch (i2){
 2d4:	b5 e0       	ldi	r27, 0x05	; 5
 2d6:	3b 16       	cp	r3, r27
 2d8:	09 f0       	breq	.+2      	; 0x2dc <HSVtoRGBW+0x254>
 2da:	be cf       	rjmp	.-132    	; 0x258 <HSVtoRGBW+0x1d0>
    case 0:        g = t; b = p;  break;
    case 1: r = q;        b = p;  break;
    case 2: r = p;        b = t;  break;
    case 3: r = p; g = q;         break;      
    case 4: r = t; g = p;         break;        
    case 5:        g = p; b = q;  break;
 2dc:	2b 85       	ldd	r18, Y+11	; 0x0b
 2de:	3c 85       	ldd	r19, Y+12	; 0x0c
 2e0:	30 93 4f 01 	sts	0x014F, r19
 2e4:	20 93 4e 01 	sts	0x014E, r18
 2e8:	9f 85       	ldd	r25, Y+15	; 0x0f
 2ea:	20 92 2d 01 	sts	0x012D, r2
 2ee:	90 93 2e 01 	sts	0x012E, r25
 2f2:	b2 cf       	rjmp	.-156    	; 0x258 <HSVtoRGBW+0x1d0>
  switch (i2){
    case 0:        g = t; b = p;  break;
    case 1: r = q;        b = p;  break;
    case 2: r = p;        b = t;  break;
    case 3: r = p; g = q;         break;      
    case 4: r = t; g = p;         break;        
 2f4:	30 93 5c 01 	sts	0x015C, r19
 2f8:	20 93 5b 01 	sts	0x015B, r18
 2fc:	eb 85       	ldd	r30, Y+11	; 0x0b
 2fe:	fc 85       	ldd	r31, Y+12	; 0x0c
 300:	f0 93 4f 01 	sts	0x014F, r31
 304:	e0 93 4e 01 	sts	0x014E, r30
 308:	a7 cf       	rjmp	.-178    	; 0x258 <HSVtoRGBW+0x1d0>
  //t    = ((long)v*(((long)2698605-(long)s*(659-f)))/659)/4096;

  switch (i2){
    case 0:        g = t; b = p;  break;
    case 1: r = q;        b = p;  break;
    case 2: r = p;        b = t;  break;
 30a:	8b 85       	ldd	r24, Y+11	; 0x0b
 30c:	9c 85       	ldd	r25, Y+12	; 0x0c
 30e:	90 93 5c 01 	sts	0x015C, r25
 312:	80 93 5b 01 	sts	0x015B, r24
 316:	30 93 2e 01 	sts	0x012E, r19
 31a:	20 93 2d 01 	sts	0x012D, r18
 31e:	9c cf       	rjmp	.-200    	; 0x258 <HSVtoRGBW+0x1d0>

00000320 <calcPWM>:
}


//TODO: dauert zu lange
// 1543 Zyklen, 192,88us@8Mhz
PWM* calcPWM(uint16_t calc_channels[5]){
 320:	2f 92       	push	r2
 322:	3f 92       	push	r3
 324:	4f 92       	push	r4
 326:	5f 92       	push	r5
 328:	6f 92       	push	r6
 32a:	7f 92       	push	r7
 32c:	8f 92       	push	r8
 32e:	9f 92       	push	r9
 330:	af 92       	push	r10
 332:	bf 92       	push	r11
 334:	cf 92       	push	r12
 336:	df 92       	push	r13
 338:	ef 92       	push	r14
 33a:	ff 92       	push	r15
 33c:	0f 93       	push	r16
 33e:	1f 93       	push	r17
 340:	df 93       	push	r29
 342:	cf 93       	push	r28
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	6a 97       	sbiw	r28, 0x1a	; 26
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	f8 94       	cli
 34e:	de bf       	out	0x3e, r29	; 62
 350:	0f be       	out	0x3f, r0	; 63
 352:	cd bf       	out	0x3d, r28	; 61
 354:	3c 01       	movw	r6, r24
  uint8_t calc_pwm_portB[6];
  uint8_t calc_pwm_portD[6];

  uint8_t first_round=TRUE;
  
  smallestNum=0;
 356:	10 92 1d 01 	sts	0x011D, r1
 35a:	10 92 1c 01 	sts	0x011C, r1
  lastsmallestNum=0;
 35e:	10 92 1f 01 	sts	0x011F, r1
 362:	10 92 1e 01 	sts	0x011E, r1
  step_counter=0;
 366:	10 92 21 01 	sts	0x0121, r1
 36a:	10 92 20 01 	sts	0x0120, r1
  port_counter=0;
 36e:	10 92 22 01 	sts	0x0122, r1
  PWM_port_counter=0;
 372:	10 92 23 01 	sts	0x0123, r1

  calc_pwm_value[0]=0;
 376:	1e 86       	std	Y+14, r1	; 0x0e
 378:	1d 86       	std	Y+13, r1	; 0x0d
 37a:	55 24       	eor	r5, r5
 37c:	53 94       	inc	r5
 37e:	88 24       	eor	r8, r8
 380:	99 24       	eor	r9, r9
 382:	1e 01       	movw	r2, r28
 384:	08 94       	sec
 386:	21 1c       	adc	r2, r1
 388:	31 1c       	adc	r3, r1
 38a:	ee 24       	eor	r14, r14
    if(port_counter==0 && smallestNum!=0)PWM_port_counter++;
    if(smallestNum!=0){
      calc_pwm_value[PWM_port_counter-1]=smallestNum-step_counter;
      step_counter+=calc_pwm_value[PWM_port_counter-1];
    }
    calc_pwm_portB[PWM_port_counter]=0xFF;
 38c:	44 24       	eor	r4, r4
 38e:	4a 94       	dec	r4
  PWM_port_counter=0;

  calc_pwm_value[0]=0;

  //first searching for the smallest number
  while(port_counter < 5){
 390:	84 e0       	ldi	r24, 0x04	; 4
 392:	8e 15       	cp	r24, r14
 394:	08 f4       	brcc	.+2      	; 0x398 <calcPWM+0x78>
 396:	89 c0       	rjmp	.+274    	; 0x4aa <calcPWM+0x18a>
    if(first_round==FALSE){
 398:	55 20       	and	r5, r5
 39a:	09 f4       	brne	.+2      	; 0x39e <calcPWM+0x7e>
 39c:	e2 c0       	rjmp	.+452    	; 0x562 <__stack+0x63>
 39e:	00 91 1c 01 	lds	r16, 0x011C
 3a2:	10 91 1d 01 	lds	r17, 0x011D
        if(smallestNum>calc_channels[i]&&lastsmallestNum<calc_channels[i]) smallestNum=calc_channels[i];
      }
    }

    //then calculating the ports of an compare interrupt      
    if(port_counter==0 && smallestNum!=0)PWM_port_counter++;
 3a6:	ee 20       	and	r14, r14
 3a8:	09 f0       	breq	.+2      	; 0x3ac <calcPWM+0x8c>
 3aa:	fd c0       	rjmp	.+506    	; 0x5a6 <__stack+0xa7>
 3ac:	01 15       	cp	r16, r1
 3ae:	11 05       	cpc	r17, r1
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <calcPWM+0x94>
 3b2:	d4 c0       	rjmp	.+424    	; 0x55c <__stack+0x5d>
 3b4:	f0 90 23 01 	lds	r15, 0x0123
 3b8:	f3 94       	inc	r15
 3ba:	f0 92 23 01 	sts	0x0123, r15
    if(smallestNum!=0){
      calc_pwm_value[PWM_port_counter-1]=smallestNum-step_counter;
 3be:	c8 01       	movw	r24, r16
 3c0:	88 19       	sub	r24, r8
 3c2:	99 09       	sbc	r25, r9
 3c4:	ef 2d       	mov	r30, r15
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	31 97       	sbiw	r30, 0x01	; 1
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	e2 0d       	add	r30, r2
 3d0:	f3 1d       	adc	r31, r3
 3d2:	95 87       	std	Z+13, r25	; 0x0d
 3d4:	84 87       	std	Z+12, r24	; 0x0c
      step_counter+=calc_pwm_value[PWM_port_counter-1];
 3d6:	88 0e       	add	r8, r24
 3d8:	99 1e       	adc	r9, r25
 3da:	90 92 21 01 	sts	0x0121, r9
 3de:	80 92 20 01 	sts	0x0120, r8
    }
    calc_pwm_portB[PWM_port_counter]=0xFF;
 3e2:	cf 2c       	mov	r12, r15
 3e4:	dd 24       	eor	r13, r13
 3e6:	d1 01       	movw	r26, r2
 3e8:	ac 0d       	add	r26, r12
 3ea:	bd 1d       	adc	r27, r13
 3ec:	4c 92       	st	X, r4
	calc_pwm_portD[PWM_port_counter]=0xFF;
 3ee:	e7 e0       	ldi	r30, 0x07	; 7
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	ec 0f       	add	r30, r28
 3f4:	fd 1f       	adc	r31, r29
 3f6:	ec 0d       	add	r30, r12
 3f8:	fd 1d       	adc	r31, r13
 3fa:	40 82       	st	Z, r4
 3fc:	b3 01       	movw	r22, r6
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	82 e3       	ldi	r24, 0x32	; 50
 404:	a8 2e       	mov	r10, r24
 406:	b1 2c       	mov	r11, r1
 408:	a0 0e       	add	r10, r16
 40a:	b1 1e       	adc	r11, r17
        port_counter++;
        switch(i){
          case 0: calc_pwm_portD[PWM_port_counter]&=~PORT_R; break;
		  case 1: calc_pwm_portD[PWM_port_counter]&=~PORT_G; break;
		  case 2: calc_pwm_portD[PWM_port_counter]&=~PORT_B; break;
		  case 3: calc_pwm_portB[PWM_port_counter]&=~PORT_W; break;
 40c:	ba 8f       	std	Y+26, r27	; 0x1a
 40e:	a9 8f       	std	Y+25, r26	; 0x19
    if(smallestNum!=0){
      calc_pwm_value[PWM_port_counter-1]=smallestNum-step_counter;
      step_counter+=calc_pwm_value[PWM_port_counter-1];
    }
    calc_pwm_portB[PWM_port_counter]=0xFF;
	calc_pwm_portD[PWM_port_counter]=0xFF;
 410:	9a 01       	movw	r18, r20
 412:	21 50       	subi	r18, 0x01	; 1
 414:	30 40       	sbci	r19, 0x00	; 0
    for(int i=0;i<5;i++){
      if(calc_channels[i]>=smallestNum && calc_channels[i] <= smallestNum+50){
 416:	db 01       	movw	r26, r22
 418:	8d 91       	ld	r24, X+
 41a:	9c 91       	ld	r25, X
 41c:	80 17       	cp	r24, r16
 41e:	91 07       	cpc	r25, r17
 420:	a8 f0       	brcs	.+42     	; 0x44c <calcPWM+0x12c>
 422:	a8 16       	cp	r10, r24
 424:	b9 06       	cpc	r11, r25
 426:	90 f0       	brcs	.+36     	; 0x44c <calcPWM+0x12c>
        port_counter++;
 428:	e3 94       	inc	r14
 42a:	e0 92 22 01 	sts	0x0122, r14
        switch(i){
 42e:	22 30       	cpi	r18, 0x02	; 2
 430:	31 05       	cpc	r19, r1
 432:	09 f4       	brne	.+2      	; 0x436 <calcPWM+0x116>
 434:	c4 c0       	rjmp	.+392    	; 0x5be <__stack+0xbf>
 436:	23 30       	cpi	r18, 0x03	; 3
 438:	31 05       	cpc	r19, r1
 43a:	84 f4       	brge	.+32     	; 0x45c <calcPWM+0x13c>
 43c:	21 15       	cp	r18, r1
 43e:	31 05       	cpc	r19, r1
 440:	09 f4       	brne	.+2      	; 0x444 <calcPWM+0x124>
 442:	c5 c0       	rjmp	.+394    	; 0x5ce <__stack+0xcf>
 444:	21 30       	cpi	r18, 0x01	; 1
 446:	31 05       	cpc	r19, r1
 448:	09 f4       	brne	.+2      	; 0x44c <calcPWM+0x12c>
 44a:	bd c0       	rjmp	.+378    	; 0x5c6 <__stack+0xc7>
      calc_pwm_value[PWM_port_counter-1]=smallestNum-step_counter;
      step_counter+=calc_pwm_value[PWM_port_counter-1];
    }
    calc_pwm_portB[PWM_port_counter]=0xFF;
	calc_pwm_portD[PWM_port_counter]=0xFF;
    for(int i=0;i<5;i++){
 44c:	45 30       	cpi	r20, 0x05	; 5
 44e:	51 05       	cpc	r21, r1
 450:	94 f4       	brge	.+36     	; 0x476 <calcPWM+0x156>
    if(smallestNum!=0){
      calc_pwm_value[PWM_port_counter-1]=smallestNum-step_counter;
      step_counter+=calc_pwm_value[PWM_port_counter-1];
    }
    calc_pwm_portB[PWM_port_counter]=0xFF;
	calc_pwm_portD[PWM_port_counter]=0xFF;
 452:	6e 5f       	subi	r22, 0xFE	; 254
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	4f 5f       	subi	r20, 0xFF	; 255
 458:	5f 4f       	sbci	r21, 0xFF	; 255
 45a:	da cf       	rjmp	.-76     	; 0x410 <calcPWM+0xf0>
    for(int i=0;i<5;i++){
      if(calc_channels[i]>=smallestNum && calc_channels[i] <= smallestNum+50){
        port_counter++;
        switch(i){
 45c:	23 30       	cpi	r18, 0x03	; 3
 45e:	31 05       	cpc	r19, r1
 460:	09 f4       	brne	.+2      	; 0x464 <calcPWM+0x144>
 462:	a7 c0       	rjmp	.+334    	; 0x5b2 <__stack+0xb3>
 464:	24 30       	cpi	r18, 0x04	; 4
 466:	31 05       	cpc	r19, r1
 468:	89 f7       	brne	.-30     	; 0x44c <calcPWM+0x12c>
          case 0: calc_pwm_portD[PWM_port_counter]&=~PORT_R; break;
		  case 1: calc_pwm_portD[PWM_port_counter]&=~PORT_G; break;
		  case 2: calc_pwm_portD[PWM_port_counter]&=~PORT_B; break;
		  case 3: calc_pwm_portB[PWM_port_counter]&=~PORT_W; break;
		  case 4: calc_pwm_portB[PWM_port_counter]&=~PORT_L; break;
 46a:	f1 01       	movw	r30, r2
 46c:	ec 0d       	add	r30, r12
 46e:	fd 1d       	adc	r31, r13
 470:	80 81       	ld	r24, Z
 472:	8d 7f       	andi	r24, 0xFD	; 253
 474:	80 83       	st	Z, r24
        }
      }
    }
    PWM_port_counter++;
 476:	f3 94       	inc	r15
 478:	f0 92 23 01 	sts	0x0123, r15
 47c:	fa 94       	dec	r15
    lastsmallestNum=smallestNum+50;
 47e:	b0 92 1f 01 	sts	0x011F, r11
 482:	a0 92 1e 01 	sts	0x011E, r10
    smallestNum=TOP_VALUE;
 486:	e0 e0       	ldi	r30, 0x00	; 0
 488:	f0 e4       	ldi	r31, 0x40	; 64
 48a:	f0 93 1d 01 	sts	0x011D, r31
 48e:	e0 93 1c 01 	sts	0x011C, r30

	if(first_round==TRUE){
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	5f 16       	cp	r5, r31
 496:	09 f0       	breq	.+2      	; 0x49a <calcPWM+0x17a>
 498:	7b cf       	rjmp	.-266    	; 0x390 <calcPWM+0x70>
      first_round=FALSE;
      if(port_counter==0)
 49a:	ee 20       	and	r14, r14
 49c:	09 f4       	brne	.+2      	; 0x4a0 <calcPWM+0x180>
 49e:	af c0       	rjmp	.+350    	; 0x5fe <__stack+0xff>
        PWM_port_counter--;
 4a0:	55 24       	eor	r5, r5
  PWM_port_counter=0;

  calc_pwm_value[0]=0;

  //first searching for the smallest number
  while(port_counter < 5){
 4a2:	84 e0       	ldi	r24, 0x04	; 4
 4a4:	8e 15       	cp	r24, r14
 4a6:	08 f0       	brcs	.+2      	; 0x4aa <calcPWM+0x18a>
 4a8:	77 cf       	rjmp	.-274    	; 0x398 <calcPWM+0x78>
      if(port_counter==0)
        PWM_port_counter--;
    }
  }
    
  if(step_counter<TOP_VALUE-50){
 4aa:	9e ec       	ldi	r25, 0xCE	; 206
 4ac:	89 16       	cp	r8, r25
 4ae:	9f e3       	ldi	r25, 0x3F	; 63
 4b0:	99 06       	cpc	r9, r25
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <calcPWM+0x196>
 4b4:	90 c0       	rjmp	.+288    	; 0x5d6 <__stack+0xd7>
    calc_pwm_value[PWM_port_counter-1]=TOP_VALUE-step_counter;
 4b6:	f0 90 23 01 	lds	r15, 0x0123
 4ba:	ef 2d       	mov	r30, r15
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	31 97       	sbiw	r30, 0x01	; 1
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	e2 0d       	add	r30, r2
 4c6:	f3 1d       	adc	r31, r3
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e4       	ldi	r25, 0x40	; 64
 4cc:	88 19       	sub	r24, r8
 4ce:	99 09       	sbc	r25, r9
 4d0:	95 87       	std	Z+13, r25	; 0x0d
 4d2:	84 87       	std	Z+12, r24	; 0x0c
 4d4:	be 01       	movw	r22, r28
 4d6:	63 5f       	subi	r22, 0xF3	; 243
 4d8:	7f 4f       	sbci	r23, 0xFF	; 255
 4da:	4f e2       	ldi	r20, 0x2F	; 47
 4dc:	51 e0       	ldi	r21, 0x01	; 1
 4de:	da 01       	movw	r26, r20
 4e0:	1c 96       	adiw	r26, 0x0c	; 12
 4e2:	20 e0       	ldi	r18, 0x00	; 0
 4e4:	30 e0       	ldi	r19, 0x00	; 0
  pwm1.portB=&pwm_portB[0];
  pwm1.portD=&pwm_portD[0];*/

  //TODO: optimieren, nur nötige Elemente kopieren oder wieder mit pointern arbeiten
  for(int i=0;i<6;i++){
    pwm1.value[i]=calc_pwm_value[i];
 4e6:	fb 01       	movw	r30, r22
 4e8:	81 91       	ld	r24, Z+
 4ea:	91 91       	ld	r25, Z+
 4ec:	bf 01       	movw	r22, r30
 4ee:	fa 01       	movw	r30, r20
 4f0:	81 93       	st	Z+, r24
 4f2:	91 93       	st	Z+, r25
 4f4:	af 01       	movw	r20, r30
    pwm1.portB[i]=calc_pwm_portB[i];
 4f6:	f1 01       	movw	r30, r2
 4f8:	e2 0f       	add	r30, r18
 4fa:	f3 1f       	adc	r31, r19
 4fc:	80 81       	ld	r24, Z
 4fe:	8c 93       	st	X, r24
    pwm1.portD[i]=calc_pwm_portD[i];
 500:	e7 e0       	ldi	r30, 0x07	; 7
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	ec 0f       	add	r30, r28
 506:	fd 1f       	adc	r31, r29
 508:	e2 0f       	add	r30, r18
 50a:	f3 1f       	adc	r31, r19
 50c:	80 81       	ld	r24, Z
 50e:	16 96       	adiw	r26, 0x06	; 6
 510:	8c 93       	st	X, r24
 512:	16 97       	sbiw	r26, 0x06	; 6
  /*pwm1.value=&pwm_value[0];
  pwm1.portB=&pwm_portB[0];
  pwm1.portD=&pwm_portD[0];*/

  //TODO: optimieren, nur nötige Elemente kopieren oder wieder mit pointern arbeiten
  for(int i=0;i<6;i++){
 514:	2f 5f       	subi	r18, 0xFF	; 255
 516:	3f 4f       	sbci	r19, 0xFF	; 255
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	26 30       	cpi	r18, 0x06	; 6
 51c:	31 05       	cpc	r19, r1
 51e:	19 f7       	brne	.-58     	; 0x4e6 <calcPWM+0x1c6>
    pwm1.value[i]=calc_pwm_value[i];
    pwm1.portB[i]=calc_pwm_portB[i];
    pwm1.portD[i]=calc_pwm_portD[i];
  }

  pwm1.compare_count=PWM_port_counter-1;
 520:	fa 94       	dec	r15
 522:	f0 92 47 01 	sts	0x0147, r15

  return &pwm1;
}
 526:	8f e2       	ldi	r24, 0x2F	; 47
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	6a 96       	adiw	r28, 0x1a	; 26
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	cf 91       	pop	r28
 538:	df 91       	pop	r29
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	df 90       	pop	r13
 544:	cf 90       	pop	r12
 546:	bf 90       	pop	r11
 548:	af 90       	pop	r10
 54a:	9f 90       	pop	r9
 54c:	8f 90       	pop	r8
 54e:	7f 90       	pop	r7
 550:	6f 90       	pop	r6
 552:	5f 90       	pop	r5
 554:	4f 90       	pop	r4
 556:	3f 90       	pop	r3
 558:	2f 90       	pop	r2
 55a:	08 95       	ret
 55c:	f0 90 23 01 	lds	r15, 0x0123
 560:	40 cf       	rjmp	.-384    	; 0x3e2 <calcPWM+0xc2>

  //first searching for the smallest number
  while(port_counter < 5){
    if(first_round==FALSE){
      for(int i=0;i<5;i++){
        if(smallestNum>calc_channels[i]&&lastsmallestNum<calc_channels[i]) smallestNum=calc_channels[i];
 562:	20 91 1e 01 	lds	r18, 0x011E
 566:	30 91 1f 01 	lds	r19, 0x011F
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	00 91 1c 01 	lds	r16, 0x011C
 572:	10 91 1d 01 	lds	r17, 0x011D
 576:	f3 01       	movw	r30, r6
 578:	e8 0f       	add	r30, r24
 57a:	f9 1f       	adc	r31, r25
 57c:	01 90       	ld	r0, Z+
 57e:	f0 81       	ld	r31, Z
 580:	e0 2d       	mov	r30, r0
 582:	e0 17       	cp	r30, r16
 584:	f1 07       	cpc	r31, r17
 586:	40 f4       	brcc	.+16     	; 0x598 <__stack+0x99>
 588:	2e 17       	cp	r18, r30
 58a:	3f 07       	cpc	r19, r31
 58c:	28 f4       	brcc	.+10     	; 0x598 <__stack+0x99>
 58e:	f0 93 1d 01 	sts	0x011D, r31
 592:	e0 93 1c 01 	sts	0x011C, r30
 596:	8f 01       	movw	r16, r30
 598:	02 96       	adiw	r24, 0x02	; 2
  calc_pwm_value[0]=0;

  //first searching for the smallest number
  while(port_counter < 5){
    if(first_round==FALSE){
      for(int i=0;i<5;i++){
 59a:	8a 30       	cpi	r24, 0x0A	; 10
 59c:	91 05       	cpc	r25, r1
 59e:	59 f7       	brne	.-42     	; 0x576 <__stack+0x77>
        if(smallestNum>calc_channels[i]&&lastsmallestNum<calc_channels[i]) smallestNum=calc_channels[i];
      }
    }

    //then calculating the ports of an compare interrupt      
    if(port_counter==0 && smallestNum!=0)PWM_port_counter++;
 5a0:	ee 20       	and	r14, r14
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <__stack+0xa7>
 5a4:	03 cf       	rjmp	.-506    	; 0x3ac <calcPWM+0x8c>
    if(smallestNum!=0){
 5a6:	01 15       	cp	r16, r1
 5a8:	11 05       	cpc	r17, r1
 5aa:	c1 f2       	breq	.-80     	; 0x55c <__stack+0x5d>
 5ac:	f0 90 23 01 	lds	r15, 0x0123
 5b0:	06 cf       	rjmp	.-500    	; 0x3be <calcPWM+0x9e>
        port_counter++;
        switch(i){
          case 0: calc_pwm_portD[PWM_port_counter]&=~PORT_R; break;
		  case 1: calc_pwm_portD[PWM_port_counter]&=~PORT_G; break;
		  case 2: calc_pwm_portD[PWM_port_counter]&=~PORT_B; break;
		  case 3: calc_pwm_portB[PWM_port_counter]&=~PORT_W; break;
 5b2:	a9 8d       	ldd	r26, Y+25	; 0x19
 5b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
 5b6:	8c 91       	ld	r24, X
 5b8:	8e 7f       	andi	r24, 0xFE	; 254
 5ba:	8c 93       	st	X, r24
 5bc:	4a cf       	rjmp	.-364    	; 0x452 <calcPWM+0x132>
      if(calc_channels[i]>=smallestNum && calc_channels[i] <= smallestNum+50){
        port_counter++;
        switch(i){
          case 0: calc_pwm_portD[PWM_port_counter]&=~PORT_R; break;
		  case 1: calc_pwm_portD[PWM_port_counter]&=~PORT_G; break;
		  case 2: calc_pwm_portD[PWM_port_counter]&=~PORT_B; break;
 5be:	80 81       	ld	r24, Z
 5c0:	8f 7b       	andi	r24, 0xBF	; 191
 5c2:	80 83       	st	Z, r24
 5c4:	46 cf       	rjmp	.-372    	; 0x452 <calcPWM+0x132>
    for(int i=0;i<5;i++){
      if(calc_channels[i]>=smallestNum && calc_channels[i] <= smallestNum+50){
        port_counter++;
        switch(i){
          case 0: calc_pwm_portD[PWM_port_counter]&=~PORT_R; break;
		  case 1: calc_pwm_portD[PWM_port_counter]&=~PORT_G; break;
 5c6:	80 81       	ld	r24, Z
 5c8:	8f 77       	andi	r24, 0x7F	; 127
 5ca:	80 83       	st	Z, r24
 5cc:	42 cf       	rjmp	.-380    	; 0x452 <calcPWM+0x132>
	calc_pwm_portD[PWM_port_counter]=0xFF;
    for(int i=0;i<5;i++){
      if(calc_channels[i]>=smallestNum && calc_channels[i] <= smallestNum+50){
        port_counter++;
        switch(i){
          case 0: calc_pwm_portD[PWM_port_counter]&=~PORT_R; break;
 5ce:	80 81       	ld	r24, Z
 5d0:	8f 7d       	andi	r24, 0xDF	; 223
 5d2:	80 83       	st	Z, r24
 5d4:	3e cf       	rjmp	.-388    	; 0x452 <calcPWM+0x132>
    
  if(step_counter<TOP_VALUE-50){
    calc_pwm_value[PWM_port_counter-1]=TOP_VALUE-step_counter;
  }
  else{
    calc_pwm_value[PWM_port_counter-2]+=TOP_VALUE-step_counter;
 5d6:	f0 90 23 01 	lds	r15, 0x0123
 5da:	ef 2d       	mov	r30, r15
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	32 97       	sbiw	r30, 0x02	; 2
 5e0:	ee 0f       	add	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	e2 0d       	add	r30, r2
 5e6:	f3 1d       	adc	r31, r3
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	90 e4       	ldi	r25, 0x40	; 64
 5ec:	88 19       	sub	r24, r8
 5ee:	99 09       	sbc	r25, r9
 5f0:	24 85       	ldd	r18, Z+12	; 0x0c
 5f2:	35 85       	ldd	r19, Z+13	; 0x0d
 5f4:	82 0f       	add	r24, r18
 5f6:	93 1f       	adc	r25, r19
 5f8:	95 87       	std	Z+13, r25	; 0x0d
 5fa:	84 87       	std	Z+12, r24	; 0x0c
 5fc:	6b cf       	rjmp	.-298    	; 0x4d4 <calcPWM+0x1b4>
    smallestNum=TOP_VALUE;

	if(first_round==TRUE){
      first_round=FALSE;
      if(port_counter==0)
        PWM_port_counter--;
 5fe:	f0 92 23 01 	sts	0x0123, r15
 602:	55 24       	eor	r5, r5
 604:	4e cf       	rjmp	.-356    	; 0x4a2 <calcPWM+0x182>

00000606 <setHSV>:
/* FUNCTIONS */
void init_color(){
  
}

void setHSV(uint16_t h, uint16_t s, uint16_t v){
 606:	ef 92       	push	r14
 608:	ff 92       	push	r15
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	df 93       	push	r29
 610:	cf 93       	push	r28
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	62 97       	sbiw	r28, 0x12	; 18
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
  temp = HSVtoRGBW(h,s,v);
 622:	32 dd       	rcall	.-1436   	; 0x88 <HSVtoRGBW>
 624:	2b 87       	std	Y+11, r18	; 0x0b
 626:	3c 87       	std	Y+12, r19	; 0x0c
 628:	4d 87       	std	Y+13, r20	; 0x0d
 62a:	5e 87       	std	Y+14, r21	; 0x0e
 62c:	6f 87       	std	Y+15, r22	; 0x0f
 62e:	78 8b       	std	Y+16, r23	; 0x10
 630:	89 8b       	std	Y+17, r24	; 0x11
 632:	9a 8b       	std	Y+18, r25	; 0x12
 634:	a3 e5       	ldi	r26, 0x53	; 83
 636:	b1 e0       	ldi	r27, 0x01	; 1
 638:	8e 01       	movw	r16, r28
 63a:	05 5f       	subi	r16, 0xF5	; 245
 63c:	1f 4f       	sbci	r17, 0xFF	; 255
 63e:	f8 01       	movw	r30, r16
 640:	88 e0       	ldi	r24, 0x08	; 8
 642:	01 90       	ld	r0, Z+
 644:	0d 92       	st	X+, r0
 646:	81 50       	subi	r24, 0x01	; 1
 648:	e1 f7       	brne	.-8      	; 0x642 <setHSV+0x3c>
  uint16_t new_channels[5]={temp.R,temp.G,temp.B,temp.W, 16384 };
 64a:	20 91 55 01 	lds	r18, 0x0155
 64e:	30 91 56 01 	lds	r19, 0x0156
 652:	40 91 57 01 	lds	r20, 0x0157
 656:	50 91 58 01 	lds	r21, 0x0158
 65a:	60 91 59 01 	lds	r22, 0x0159
 65e:	70 91 5a 01 	lds	r23, 0x015A
 662:	80 91 53 01 	lds	r24, 0x0153
 666:	90 91 54 01 	lds	r25, 0x0154
 66a:	9a 83       	std	Y+2, r25	; 0x02
 66c:	89 83       	std	Y+1, r24	; 0x01
 66e:	3c 83       	std	Y+4, r19	; 0x04
 670:	2b 83       	std	Y+3, r18	; 0x03
 672:	5e 83       	std	Y+6, r21	; 0x06
 674:	4d 83       	std	Y+5, r20	; 0x05
 676:	78 87       	std	Y+8, r23	; 0x08
 678:	6f 83       	std	Y+7, r22	; 0x07
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e4       	ldi	r25, 0x40	; 64
 67e:	9a 87       	std	Y+10, r25	; 0x0a
 680:	89 87       	std	Y+9, r24	; 0x09
 682:	7e 01       	movw	r14, r28
 684:	08 94       	sec
 686:	e1 1c       	adc	r14, r1
 688:	f1 1c       	adc	r15, r1
 68a:	f7 01       	movw	r30, r14
  //uint16_t new_channels[5]={0,0,0,1000, 16384 };

  //transforming a 12Bit to a 14Bit variable
  if(TOP_VALUE==16384){
    for(uint8_t i=0;i<5;i++)
      new_channels[i]=((uint32_t)new_channels[i]*4);
 68c:	80 81       	ld	r24, Z
 68e:	91 81       	ldd	r25, Z+1	; 0x01
 690:	a0 e0       	ldi	r26, 0x00	; 0
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	aa 1f       	adc	r26, r26
 69a:	bb 1f       	adc	r27, r27
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	81 93       	st	Z+, r24
 6a6:	91 93       	st	Z+, r25
  uint16_t new_channels[5]={temp.R,temp.G,temp.B,temp.W, 16384 };
  //uint16_t new_channels[5]={0,0,0,1000, 16384 };

  //transforming a 12Bit to a 14Bit variable
  if(TOP_VALUE==16384){
    for(uint8_t i=0;i<5;i++)
 6a8:	e0 17       	cp	r30, r16
 6aa:	f1 07       	cpc	r31, r17
 6ac:	79 f7       	brne	.-34     	; 0x68c <setHSV+0x86>
      new_channels[i]=((uint32_t)new_channels[i]*4);
  }

  //scaling duty circle to the typical
  new_channels[0]=((long)new_channels[0]*TYP_DUTY_R)/100;
 6ae:	69 81       	ldd	r22, Y+1	; 0x01
 6b0:	7a 81       	ldd	r23, Y+2	; 0x02
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	28 e4       	ldi	r18, 0x48	; 72
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	b9 d3       	rcall	.+1906   	; 0xe32 <__mulsi3>
 6c0:	24 e6       	ldi	r18, 0x64	; 100
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	e7 d3       	rcall	.+1998   	; 0xe98 <__divmodsi4>
 6ca:	3a 83       	std	Y+2, r19	; 0x02
 6cc:	29 83       	std	Y+1, r18	; 0x01
  new_channels[1]=((long)new_channels[1]*TYP_DUTY_G)/100;
 6ce:	6b 81       	ldd	r22, Y+3	; 0x03
 6d0:	7c 81       	ldd	r23, Y+4	; 0x04
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	2e e1       	ldi	r18, 0x1E	; 30
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	a9 d3       	rcall	.+1874   	; 0xe32 <__mulsi3>
 6e0:	24 e6       	ldi	r18, 0x64	; 100
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	d7 d3       	rcall	.+1966   	; 0xe98 <__divmodsi4>
 6ea:	3c 83       	std	Y+4, r19	; 0x04
 6ec:	2b 83       	std	Y+3, r18	; 0x03
  new_channels[2]=((long)new_channels[2]*TYP_DUTY_B)/100;
 6ee:	6d 81       	ldd	r22, Y+5	; 0x05
 6f0:	7e 81       	ldd	r23, Y+6	; 0x06
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	2c e1       	ldi	r18, 0x1C	; 28
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	40 e0       	ldi	r20, 0x00	; 0
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	99 d3       	rcall	.+1842   	; 0xe32 <__mulsi3>
 700:	24 e6       	ldi	r18, 0x64	; 100
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	c7 d3       	rcall	.+1934   	; 0xe98 <__divmodsi4>
 70a:	3e 83       	std	Y+6, r19	; 0x06
 70c:	2d 83       	std	Y+5, r18	; 0x05
  new_channels[3]=((long)new_channels[3]*TYP_DUTY_W)/100;
 70e:	6f 81       	ldd	r22, Y+7	; 0x07
 710:	78 85       	ldd	r23, Y+8	; 0x08
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	2e e1       	ldi	r18, 0x1E	; 30
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	89 d3       	rcall	.+1810   	; 0xe32 <__mulsi3>
 720:	24 e6       	ldi	r18, 0x64	; 100
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	b7 d3       	rcall	.+1902   	; 0xe98 <__divmodsi4>
 72a:	38 87       	std	Y+8, r19	; 0x08
 72c:	2f 83       	std	Y+7, r18	; 0x07
  new_channels[4]=TOP_VALUE;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e4       	ldi	r25, 0x40	; 64
 732:	9a 87       	std	Y+10, r25	; 0x0a
 734:	89 87       	std	Y+9, r24	; 0x09
  /*new_channels[0]=0;
  new_channels[1]=0;
  new_channels[2]=0;
  new_channels[3]=((long)4095*TYP_DUTY_W)/100;*/

  current_PWM=(PWM*)calcPWM(new_channels);
 736:	c7 01       	movw	r24, r14
 738:	f3 dd       	rcall	.-1050   	; 0x320 <calcPWM>
 73a:	90 93 62 01 	sts	0x0162, r25
 73e:	80 93 61 01 	sts	0x0161, r24
  setPWM(current_PWM);
 742:	b6 d2       	rcall	.+1388   	; 0xcb0 <setPWM>
}
 744:	62 96       	adiw	r28, 0x12	; 18
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	f8 94       	cli
 74a:	de bf       	out	0x3e, r29	; 62
 74c:	0f be       	out	0x3f, r0	; 63
 74e:	cd bf       	out	0x3d, r28	; 61
 750:	cf 91       	pop	r28
 752:	df 91       	pop	r29
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	ff 90       	pop	r15
 75a:	ef 90       	pop	r14
 75c:	08 95       	ret

0000075e <__vector_16>:

//interrupt
uint16_t timer_counter,timer_count;


ISR(TIMER0_OVF_vect){
 75e:	1f 92       	push	r1
 760:	0f 92       	push	r0
 762:	0f b6       	in	r0, 0x3f	; 63
 764:	0f 92       	push	r0
 766:	11 24       	eor	r1, r1
 768:	2f 93       	push	r18
 76a:	3f 93       	push	r19
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
  if(timer_counter==timer_count){
 770:	20 91 ae 01 	lds	r18, 0x01AE
 774:	30 91 af 01 	lds	r19, 0x01AF
 778:	80 91 01 02 	lds	r24, 0x0201
 77c:	90 91 02 02 	lds	r25, 0x0202
 780:	28 17       	cp	r18, r24
 782:	39 07       	cpc	r19, r25
 784:	29 f4       	brne	.+10     	; 0x790 <__vector_16+0x32>
    timer_counter=0;
	new_value=TRUE;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	80 93 24 01 	sts	0x0124, r24
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	30 e0       	ldi	r19, 0x00	; 0
  }
  timer_counter++;
 790:	2f 5f       	subi	r18, 0xFF	; 255
 792:	3f 4f       	sbci	r19, 0xFF	; 255
 794:	30 93 af 01 	sts	0x01AF, r19
 798:	20 93 ae 01 	sts	0x01AE, r18
}
 79c:	9f 91       	pop	r25
 79e:	8f 91       	pop	r24
 7a0:	3f 91       	pop	r19
 7a2:	2f 91       	pop	r18
 7a4:	0f 90       	pop	r0
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	0f 90       	pop	r0
 7aa:	1f 90       	pop	r1
 7ac:	18 95       	reti

000007ae <init_fader>:

void init_fader(){
  TCCR0B |= 0x01;
 7ae:	85 b5       	in	r24, 0x25	; 37
 7b0:	81 60       	ori	r24, 0x01	; 1
 7b2:	85 bd       	out	0x25, r24	; 37
  TIMSK0 |= 0x01;
 7b4:	ee e6       	ldi	r30, 0x6E	; 110
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	81 60       	ori	r24, 0x01	; 1
 7bc:	80 83       	st	Z, r24
  timer_count=COUNTER_10ms_8Mhz;
 7be:	88 e3       	ldi	r24, 0x38	; 56
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	90 93 02 02 	sts	0x0202, r25
 7c6:	80 93 01 02 	sts	0x0201, r24
}
 7ca:	08 95       	ret

000007cc <setSlot>:
	anim_counter++;
  }
}


void setSlot(HSV_anim anim){
 7cc:	cf 92       	push	r12
 7ce:	df 92       	push	r13
 7d0:	ef 92       	push	r14
 7d2:	ff 92       	push	r15
 7d4:	0f 93       	push	r16
 7d6:	1f 93       	push	r17
 7d8:	df 93       	push	r29
 7da:	cf 93       	push	r28
 7dc:	cd b7       	in	r28, 0x3d	; 61
 7de:	de b7       	in	r29, 0x3e	; 62
 7e0:	2e 97       	sbiw	r28, 0x0e	; 14
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	c9 82       	std	Y+1, r12	; 0x01
 7ee:	da 82       	std	Y+2, r13	; 0x02
 7f0:	eb 82       	std	Y+3, r14	; 0x03
 7f2:	fc 82       	std	Y+4, r15	; 0x04
 7f4:	0d 83       	std	Y+5, r16	; 0x05
 7f6:	1e 83       	std	Y+6, r17	; 0x06
 7f8:	2f 83       	std	Y+7, r18	; 0x07
 7fa:	38 87       	std	Y+8, r19	; 0x08
 7fc:	49 87       	std	Y+9, r20	; 0x09
 7fe:	5a 87       	std	Y+10, r21	; 0x0a
 800:	6b 87       	std	Y+11, r22	; 0x0b
 802:	7c 87       	std	Y+12, r23	; 0x0c
 804:	8d 87       	std	Y+13, r24	; 0x0d
 806:	9e 87       	std	Y+14, r25	; 0x0e
  prog.next_slot[prog.slot_count]=anim;
 808:	80 91 b0 01 	lds	r24, 0x01B0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	fc 01       	movw	r30, r24
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	ee 0f       	add	r30, r30
 81e:	ff 1f       	adc	r31, r31
 820:	e8 1b       	sub	r30, r24
 822:	f9 0b       	sbc	r31, r25
 824:	ef 54       	subi	r30, 0x4F	; 79
 826:	fe 4f       	sbci	r31, 0xFE	; 254
 828:	de 01       	movw	r26, r28
 82a:	11 96       	adiw	r26, 0x01	; 1
 82c:	8e e0       	ldi	r24, 0x0E	; 14
 82e:	0d 90       	ld	r0, X+
 830:	01 92       	st	Z+, r0
 832:	81 50       	subi	r24, 0x01	; 1
 834:	e1 f7       	brne	.-8      	; 0x82e <setSlot+0x62>
  prog.slot_count++;
 836:	80 91 b0 01 	lds	r24, 0x01B0
 83a:	8f 5f       	subi	r24, 0xFF	; 255
 83c:	80 93 b0 01 	sts	0x01B0, r24
}
 840:	2e 96       	adiw	r28, 0x0e	; 14
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	f8 94       	cli
 846:	de bf       	out	0x3e, r29	; 62
 848:	0f be       	out	0x3f, r0	; 63
 84a:	cd bf       	out	0x3d, r28	; 61
 84c:	cf 91       	pop	r28
 84e:	df 91       	pop	r29
 850:	1f 91       	pop	r17
 852:	0f 91       	pop	r16
 854:	ff 90       	pop	r15
 856:	ef 90       	pop	r14
 858:	df 90       	pop	r13
 85a:	cf 90       	pop	r12
 85c:	08 95       	ret

0000085e <newProgram>:

void newProgram(){
  prog.slot_count=0;
 85e:	10 92 b0 01 	sts	0x01B0, r1
}
 862:	08 95       	ret

00000864 <runWhite>:
void runHSV(uint16_t h, uint16_t s, uint16_t v){
  run_thread=FALSE;
  setHSV(h,s,v);
}

void runWhite(uint16_t brightness){
 864:	ac 01       	movw	r20, r24
  run_thread=FALSE;
 866:	10 92 25 01 	sts	0x0125, r1
  setHSV(0,0,brightness);
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	70 e0       	ldi	r23, 0x00	; 0
 872:	c9 de       	rcall	.-622    	; 0x606 <setHSV>
}
 874:	08 95       	ret

00000876 <runHSV>:
  anim_counter=1;
}

//TODO: interrupt deaktivieren
void runHSV(uint16_t h, uint16_t s, uint16_t v){
  run_thread=FALSE;
 876:	10 92 25 01 	sts	0x0125, r1
  setHSV(h,s,v);
 87a:	c5 de       	rcall	.-630    	; 0x606 <setHSV>
}
 87c:	08 95       	ret

0000087e <runProgram>:
  timer_counter=0;
  anim_counter=1;
}

void runProgram(){
  mode=MODE_PROG;
 87e:	82 e0       	ldi	r24, 0x02	; 2
 880:	80 93 f9 01 	sts	0x01F9, r24
  run_thread=TRUE;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	80 93 25 01 	sts	0x0125, r24
  current_prog = prog;
 88a:	a7 e6       	ldi	r26, 0x67	; 103
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	e0 eb       	ldi	r30, 0xB0	; 176
 890:	f1 e0       	ldi	r31, 0x01	; 1
 892:	87 e4       	ldi	r24, 0x47	; 71
 894:	01 90       	ld	r0, Z+
 896:	0d 92       	st	X+, r0
 898:	81 50       	subi	r24, 0x01	; 1
 89a:	e1 f7       	brne	.-8      	; 0x894 <runProgram+0x16>

  current_slot=prog.next_slot[0];
 89c:	a0 e0       	ldi	r26, 0x00	; 0
 89e:	b1 e0       	ldi	r27, 0x01	; 1
 8a0:	e1 eb       	ldi	r30, 0xB1	; 177
 8a2:	f1 e0       	ldi	r31, 0x01	; 1
 8a4:	8e e0       	ldi	r24, 0x0E	; 14
 8a6:	01 90       	ld	r0, Z+
 8a8:	0d 92       	st	X+, r0
 8aa:	81 50       	subi	r24, 0x01	; 1
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <runProgram+0x28>
  h=current_slot.H;
 8ae:	80 91 00 01 	lds	r24, 0x0100
 8b2:	90 91 01 01 	lds	r25, 0x0101
 8b6:	90 93 00 02 	sts	0x0200, r25
 8ba:	80 93 ff 01 	sts	0x01FF, r24
  s=current_slot.S;
 8be:	60 91 02 01 	lds	r22, 0x0102
 8c2:	70 91 03 01 	lds	r23, 0x0103
 8c6:	70 93 fe 01 	sts	0x01FE, r23
 8ca:	60 93 fd 01 	sts	0x01FD, r22
  v=current_slot.V;
 8ce:	40 91 04 01 	lds	r20, 0x0104
 8d2:	50 91 05 01 	lds	r21, 0x0105
 8d6:	50 93 fb 01 	sts	0x01FB, r21
 8da:	40 93 fa 01 	sts	0x01FA, r20
  setHSV(h,s,v);
 8de:	93 de       	rcall	.-730    	; 0x606 <setHSV>
  timer_counter=0;
 8e0:	10 92 af 01 	sts	0x01AF, r1
 8e4:	10 92 ae 01 	sts	0x01AE, r1
  anim_counter=1;
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	90 93 f8 01 	sts	0x01F8, r25
 8f0:	80 93 f7 01 	sts	0x01F7, r24
}
 8f4:	08 95       	ret

000008f6 <runSlot>:

void newProgram(){
  prog.slot_count=0;
}

void runSlot(HSV_anim anim){
 8f6:	cf 92       	push	r12
 8f8:	df 92       	push	r13
 8fa:	ef 92       	push	r14
 8fc:	ff 92       	push	r15
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	2e 97       	sbiw	r28, 0x0e	; 14
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	c9 82       	std	Y+1, r12	; 0x01
 918:	da 82       	std	Y+2, r13	; 0x02
 91a:	eb 82       	std	Y+3, r14	; 0x03
 91c:	fc 82       	std	Y+4, r15	; 0x04
 91e:	0d 83       	std	Y+5, r16	; 0x05
 920:	1e 83       	std	Y+6, r17	; 0x06
 922:	2f 83       	std	Y+7, r18	; 0x07
 924:	38 87       	std	Y+8, r19	; 0x08
 926:	49 87       	std	Y+9, r20	; 0x09
 928:	5a 87       	std	Y+10, r21	; 0x0a
 92a:	6b 87       	std	Y+11, r22	; 0x0b
 92c:	7c 87       	std	Y+12, r23	; 0x0c
 92e:	8d 87       	std	Y+13, r24	; 0x0d
 930:	9e 87       	std	Y+14, r25	; 0x0e
  mode=MODE_SLOT;
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	80 93 f9 01 	sts	0x01F9, r24
  run_thread=TRUE;
 938:	80 93 25 01 	sts	0x0125, r24
  current_slot=anim;
 93c:	a0 e0       	ldi	r26, 0x00	; 0
 93e:	b1 e0       	ldi	r27, 0x01	; 1
 940:	fe 01       	movw	r30, r28
 942:	31 96       	adiw	r30, 0x01	; 1
 944:	8e e0       	ldi	r24, 0x0E	; 14
 946:	01 90       	ld	r0, Z+
 948:	0d 92       	st	X+, r0
 94a:	81 50       	subi	r24, 0x01	; 1
 94c:	e1 f7       	brne	.-8      	; 0x946 <runSlot+0x50>

  h=current_slot.H;
 94e:	80 91 00 01 	lds	r24, 0x0100
 952:	90 91 01 01 	lds	r25, 0x0101
 956:	90 93 00 02 	sts	0x0200, r25
 95a:	80 93 ff 01 	sts	0x01FF, r24
  s=current_slot.S;
 95e:	60 91 02 01 	lds	r22, 0x0102
 962:	70 91 03 01 	lds	r23, 0x0103
 966:	70 93 fe 01 	sts	0x01FE, r23
 96a:	60 93 fd 01 	sts	0x01FD, r22
  v=current_slot.V;
 96e:	40 91 04 01 	lds	r20, 0x0104
 972:	50 91 05 01 	lds	r21, 0x0105
 976:	50 93 fb 01 	sts	0x01FB, r21
 97a:	40 93 fa 01 	sts	0x01FA, r20
  setHSV(h,s,v);
 97e:	43 de       	rcall	.-890    	; 0x606 <setHSV>
  timer_counter=0;
 980:	10 92 af 01 	sts	0x01AF, r1
 984:	10 92 ae 01 	sts	0x01AE, r1
  anim_counter=1;
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	90 93 f8 01 	sts	0x01F8, r25
 990:	80 93 f7 01 	sts	0x01F7, r24
}
 994:	2e 96       	adiw	r28, 0x0e	; 14
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	f8 94       	cli
 99a:	de bf       	out	0x3e, r29	; 62
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	cd bf       	out	0x3d, r28	; 61
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	1f 91       	pop	r17
 9a6:	0f 91       	pop	r16
 9a8:	ff 90       	pop	r15
 9aa:	ef 90       	pop	r14
 9ac:	df 90       	pop	r13
 9ae:	cf 90       	pop	r12
 9b0:	08 95       	ret

000009b2 <faderThread>:
  TIMSK0 |= 0x01;
  timer_count=COUNTER_10ms_8Mhz;
}


void faderThread(){
 9b2:	6f 92       	push	r6
 9b4:	7f 92       	push	r7
 9b6:	8f 92       	push	r8
 9b8:	9f 92       	push	r9
 9ba:	af 92       	push	r10
 9bc:	bf 92       	push	r11
 9be:	cf 92       	push	r12
 9c0:	df 92       	push	r13
 9c2:	ef 92       	push	r14
 9c4:	ff 92       	push	r15
 9c6:	0f 93       	push	r16
 9c8:	1f 93       	push	r17
  if(run_thread==TRUE && new_value==TRUE){
 9ca:	80 91 25 01 	lds	r24, 0x0125
 9ce:	81 30       	cpi	r24, 0x01	; 1
 9d0:	69 f0       	breq	.+26     	; 0x9ec <faderThread+0x3a>
	v=current_slot.V+((long)current_slot.V_delta*anim_counter)/(short)current_slot.time;

    setHSV(h,s,v);
	anim_counter++;
  }
}
 9d2:	1f 91       	pop	r17
 9d4:	0f 91       	pop	r16
 9d6:	ff 90       	pop	r15
 9d8:	ef 90       	pop	r14
 9da:	df 90       	pop	r13
 9dc:	cf 90       	pop	r12
 9de:	bf 90       	pop	r11
 9e0:	af 90       	pop	r10
 9e2:	9f 90       	pop	r9
 9e4:	8f 90       	pop	r8
 9e6:	7f 90       	pop	r7
 9e8:	6f 90       	pop	r6
 9ea:	08 95       	ret
  timer_count=COUNTER_10ms_8Mhz;
}


void faderThread(){
  if(run_thread==TRUE && new_value==TRUE){
 9ec:	80 91 24 01 	lds	r24, 0x0124
 9f0:	81 30       	cpi	r24, 0x01	; 1
 9f2:	79 f7       	brne	.-34     	; 0x9d2 <faderThread+0x20>
    new_value=FALSE;
 9f4:	10 92 24 01 	sts	0x0124, r1
    
	if(anim_counter>=current_slot.time){
 9f8:	20 91 0c 01 	lds	r18, 0x010C
 9fc:	30 91 0d 01 	lds	r19, 0x010D
 a00:	80 91 f7 01 	lds	r24, 0x01F7
 a04:	90 91 f8 01 	lds	r25, 0x01F8
 a08:	82 17       	cp	r24, r18
 a0a:	93 07       	cpc	r25, r19
 a0c:	58 f0       	brcs	.+22     	; 0xa24 <faderThread+0x72>
      anim_counter=0;
 a0e:	10 92 f8 01 	sts	0x01F8, r1
 a12:	10 92 f7 01 	sts	0x01F7, r1
	  if(mode==MODE_PROG){
 a16:	80 91 f9 01 	lds	r24, 0x01F9
 a1a:	82 30       	cpi	r24, 0x02	; 2
 a1c:	09 f4       	brne	.+2      	; 0xa20 <faderThread+0x6e>
 a1e:	60 c0       	rjmp	.+192    	; 0xae0 <faderThread+0x12e>
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	90 e0       	ldi	r25, 0x00	; 0
        current_slot=prog.next_slot[slot_counter];
	  }
	}

    //TODO check if short cast is alright, maybe overflow
    h=current_slot.H+((long)current_slot.H_delta*anim_counter)/(short)current_slot.time;
 a24:	6c 01       	movw	r12, r24
 a26:	ee 24       	eor	r14, r14
 a28:	ff 24       	eor	r15, r15
 a2a:	49 01       	movw	r8, r18
 a2c:	aa 24       	eor	r10, r10
 a2e:	97 fc       	sbrc	r9, 7
 a30:	a0 94       	com	r10
 a32:	ba 2c       	mov	r11, r10
 a34:	20 91 06 01 	lds	r18, 0x0106
 a38:	30 91 07 01 	lds	r19, 0x0107
 a3c:	44 27       	eor	r20, r20
 a3e:	37 fd       	sbrc	r19, 7
 a40:	40 95       	com	r20
 a42:	54 2f       	mov	r21, r20
 a44:	c7 01       	movw	r24, r14
 a46:	b6 01       	movw	r22, r12
 a48:	f4 d1       	rcall	.+1000   	; 0xe32 <__mulsi3>
 a4a:	a5 01       	movw	r20, r10
 a4c:	94 01       	movw	r18, r8
 a4e:	24 d2       	rcall	.+1096   	; 0xe98 <__divmodsi4>
 a50:	60 90 00 01 	lds	r6, 0x0100
 a54:	70 90 01 01 	lds	r7, 0x0101
 a58:	62 0e       	add	r6, r18
 a5a:	73 1e       	adc	r7, r19
 a5c:	70 92 00 02 	sts	0x0200, r7
 a60:	60 92 ff 01 	sts	0x01FF, r6
    s=current_slot.S+((long)current_slot.S_delta*anim_counter)/(short)current_slot.time;
 a64:	60 91 08 01 	lds	r22, 0x0108
 a68:	70 91 09 01 	lds	r23, 0x0109
 a6c:	88 27       	eor	r24, r24
 a6e:	77 fd       	sbrc	r23, 7
 a70:	80 95       	com	r24
 a72:	98 2f       	mov	r25, r24
 a74:	a7 01       	movw	r20, r14
 a76:	96 01       	movw	r18, r12
 a78:	dc d1       	rcall	.+952    	; 0xe32 <__mulsi3>
 a7a:	a5 01       	movw	r20, r10
 a7c:	94 01       	movw	r18, r8
 a7e:	0c d2       	rcall	.+1048   	; 0xe98 <__divmodsi4>
 a80:	00 91 02 01 	lds	r16, 0x0102
 a84:	10 91 03 01 	lds	r17, 0x0103
 a88:	02 0f       	add	r16, r18
 a8a:	13 1f       	adc	r17, r19
 a8c:	10 93 fe 01 	sts	0x01FE, r17
 a90:	00 93 fd 01 	sts	0x01FD, r16
	v=current_slot.V+((long)current_slot.V_delta*anim_counter)/(short)current_slot.time;
 a94:	60 91 0a 01 	lds	r22, 0x010A
 a98:	70 91 0b 01 	lds	r23, 0x010B
 a9c:	88 27       	eor	r24, r24
 a9e:	77 fd       	sbrc	r23, 7
 aa0:	80 95       	com	r24
 aa2:	98 2f       	mov	r25, r24
 aa4:	a7 01       	movw	r20, r14
 aa6:	96 01       	movw	r18, r12
 aa8:	c4 d1       	rcall	.+904    	; 0xe32 <__mulsi3>
 aaa:	a5 01       	movw	r20, r10
 aac:	94 01       	movw	r18, r8
 aae:	f4 d1       	rcall	.+1000   	; 0xe98 <__divmodsi4>
 ab0:	e0 91 04 01 	lds	r30, 0x0104
 ab4:	f0 91 05 01 	lds	r31, 0x0105
 ab8:	e2 0f       	add	r30, r18
 aba:	f3 1f       	adc	r31, r19
 abc:	f0 93 fb 01 	sts	0x01FB, r31
 ac0:	e0 93 fa 01 	sts	0x01FA, r30

    setHSV(h,s,v);
 ac4:	c3 01       	movw	r24, r6
 ac6:	b8 01       	movw	r22, r16
 ac8:	af 01       	movw	r20, r30
 aca:	9d dd       	rcall	.-1222   	; 0x606 <setHSV>
	anim_counter++;
 acc:	80 91 f7 01 	lds	r24, 0x01F7
 ad0:	90 91 f8 01 	lds	r25, 0x01F8
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	90 93 f8 01 	sts	0x01F8, r25
 ada:	80 93 f7 01 	sts	0x01F7, r24
 ade:	79 cf       	rjmp	.-270    	; 0x9d2 <faderThread+0x20>
    new_value=FALSE;
    
	if(anim_counter>=current_slot.time){
      anim_counter=0;
	  if(mode==MODE_PROG){
	    slot_counter++;
 ae0:	20 91 fc 01 	lds	r18, 0x01FC
 ae4:	2f 5f       	subi	r18, 0xFF	; 255
 ae6:	20 93 fc 01 	sts	0x01FC, r18
        if(slot_counter>=prog.slot_count)
 aea:	80 91 b0 01 	lds	r24, 0x01B0
 aee:	28 17       	cp	r18, r24
 af0:	18 f0       	brcs	.+6      	; 0xaf8 <faderThread+0x146>
		  slot_counter=0;
 af2:	10 92 fc 01 	sts	0x01FC, r1
 af6:	20 e0       	ldi	r18, 0x00	; 0
        current_slot=prog.next_slot[slot_counter];
 af8:	82 2f       	mov	r24, r18
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	88 0f       	add	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	fc 01       	movw	r30, r24
 b02:	ee 0f       	add	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	ee 0f       	add	r30, r30
 b08:	ff 1f       	adc	r31, r31
 b0a:	ee 0f       	add	r30, r30
 b0c:	ff 1f       	adc	r31, r31
 b0e:	e8 1b       	sub	r30, r24
 b10:	f9 0b       	sbc	r31, r25
 b12:	a0 e0       	ldi	r26, 0x00	; 0
 b14:	b1 e0       	ldi	r27, 0x01	; 1
 b16:	ef 54       	subi	r30, 0x4F	; 79
 b18:	fe 4f       	sbci	r31, 0xFE	; 254
 b1a:	8e e0       	ldi	r24, 0x0E	; 14
 b1c:	01 90       	ld	r0, Z+
 b1e:	0d 92       	st	X+, r0
 b20:	81 50       	subi	r24, 0x01	; 1
 b22:	e1 f7       	brne	.-8      	; 0xb1c <faderThread+0x16a>
 b24:	20 91 0c 01 	lds	r18, 0x010C
 b28:	30 91 0d 01 	lds	r19, 0x010D
 b2c:	80 91 f7 01 	lds	r24, 0x01F7
 b30:	90 91 f8 01 	lds	r25, 0x01F8
 b34:	77 cf       	rjmp	.-274    	; 0xa24 <faderThread+0x72>

00000b36 <__vector_13>:
  Rechenzeit:
  - neuen PWM setzen		82Zyklen
  - letzter Interrupt		61Zyklen
  - normaler Interrupt		49Zyklen
  */
ISR(TIMER1_OVF_vect){
 b36:	1f 92       	push	r1
 b38:	0f 92       	push	r0
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	0f 92       	push	r0
 b3e:	11 24       	eor	r1, r1
 b40:	2f 93       	push	r18
 b42:	3f 93       	push	r19
 b44:	4f 93       	push	r20
 b46:	8f 93       	push	r24
 b48:	9f 93       	push	r25
 b4a:	ef 93       	push	r30
 b4c:	ff 93       	push	r31
  //last interrupt
  if(compare_counter==compare_count){
 b4e:	40 91 26 01 	lds	r20, 0x0126
 b52:	80 91 27 01 	lds	r24, 0x0127
 b56:	48 17       	cp	r20, r24
 b58:	c1 f1       	breq	.+112    	; 0xbca <__vector_13+0x94>

    compare_counter=0;
  }
  //normal interrupt
  else{
    PORTD &= pwm_portD[compare_counter];
 b5a:	9b b1       	in	r25, 0x0b	; 11
 b5c:	24 2f       	mov	r18, r20
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	e0 91 1a 01 	lds	r30, 0x011A
 b64:	f0 91 1b 01 	lds	r31, 0x011B
 b68:	e2 0f       	add	r30, r18
 b6a:	f3 1f       	adc	r31, r19
 b6c:	80 81       	ld	r24, Z
 b6e:	98 23       	and	r25, r24
 b70:	9b b9       	out	0x0b, r25	; 11
    PORTB &= pwm_portB[compare_counter];
 b72:	95 b1       	in	r25, 0x05	; 5
 b74:	e0 91 18 01 	lds	r30, 0x0118
 b78:	f0 91 19 01 	lds	r31, 0x0119
 b7c:	e2 0f       	add	r30, r18
 b7e:	f3 1f       	adc	r31, r19
 b80:	80 81       	ld	r24, Z
 b82:	98 23       	and	r25, r24
 b84:	95 b9       	out	0x05, r25	; 5
  }

  TCNT1=0xFFFF-pwm_value[compare_counter]+40;
 b86:	84 2f       	mov	r24, r20
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	e0 91 16 01 	lds	r30, 0x0116
 b92:	f0 91 17 01 	lds	r31, 0x0117
 b96:	e8 0f       	add	r30, r24
 b98:	f9 1f       	adc	r31, r25
 b9a:	80 81       	ld	r24, Z
 b9c:	91 81       	ldd	r25, Z+1	; 0x01
 b9e:	80 95       	com	r24
 ba0:	90 95       	com	r25
 ba2:	88 96       	adiw	r24, 0x28	; 40
 ba4:	90 93 85 00 	sts	0x0085, r25
 ba8:	80 93 84 00 	sts	0x0084, r24
  compare_counter++;  
 bac:	4f 5f       	subi	r20, 0xFF	; 255
 bae:	40 93 26 01 	sts	0x0126, r20
}
 bb2:	ff 91       	pop	r31
 bb4:	ef 91       	pop	r30
 bb6:	9f 91       	pop	r25
 bb8:	8f 91       	pop	r24
 bba:	4f 91       	pop	r20
 bbc:	3f 91       	pop	r19
 bbe:	2f 91       	pop	r18
 bc0:	0f 90       	pop	r0
 bc2:	0f be       	out	0x3f, r0	; 63
 bc4:	0f 90       	pop	r0
 bc6:	1f 90       	pop	r1
 bc8:	18 95       	reti
ISR(TIMER1_OVF_vect){
  //last interrupt
  if(compare_counter==compare_count){

    //if a new PWM should be displayed, then the pointer on the array will be switched
    if(new_PWM==TRUE){
 bca:	80 91 2a 01 	lds	r24, 0x012A
 bce:	81 30       	cpi	r24, 0x01	; 1
 bd0:	b1 f0       	breq	.+44     	; 0xbfe <__vector_13+0xc8>
	  compare_count=next_compare_count;
      
	  new_PWM=FALSE;
	}

    PORTD |= 0xE0&pwm_portD[0];
 bd2:	9b b1       	in	r25, 0x0b	; 11
 bd4:	e0 91 1a 01 	lds	r30, 0x011A
 bd8:	f0 91 1b 01 	lds	r31, 0x011B
 bdc:	80 81       	ld	r24, Z
 bde:	80 7e       	andi	r24, 0xE0	; 224
 be0:	89 2b       	or	r24, r25
 be2:	8b b9       	out	0x0b, r24	; 11
    PORTB |= 0x03&pwm_portB[0];
 be4:	95 b1       	in	r25, 0x05	; 5
 be6:	e0 91 18 01 	lds	r30, 0x0118
 bea:	f0 91 19 01 	lds	r31, 0x0119
 bee:	80 81       	ld	r24, Z
 bf0:	83 70       	andi	r24, 0x03	; 3
 bf2:	89 2b       	or	r24, r25
 bf4:	85 b9       	out	0x05, r24	; 5

    compare_counter=0;
 bf6:	10 92 26 01 	sts	0x0126, r1
 bfa:	40 e0       	ldi	r20, 0x00	; 0
 bfc:	c4 cf       	rjmp	.-120    	; 0xb86 <__vector_13+0x50>
  //last interrupt
  if(compare_counter==compare_count){

    //if a new PWM should be displayed, then the pointer on the array will be switched
    if(new_PWM==TRUE){
	  if(pwm_pointer==0){  
 bfe:	80 91 29 01 	lds	r24, 0x0129
 c02:	88 23       	and	r24, r24
 c04:	c9 f4       	brne	.+50     	; 0xc38 <__vector_13+0x102>
        pwm_value=&pwm_value1;
 c06:	8b e0       	ldi	r24, 0x0B	; 11
 c08:	92 e0       	ldi	r25, 0x02	; 2
 c0a:	90 93 17 01 	sts	0x0117, r25
 c0e:	80 93 16 01 	sts	0x0116, r24
		pwm_portB=&pwm_portB1;
 c12:	83 e0       	ldi	r24, 0x03	; 3
 c14:	92 e0       	ldi	r25, 0x02	; 2
 c16:	90 93 19 01 	sts	0x0119, r25
 c1a:	80 93 18 01 	sts	0x0118, r24
		pwm_portD=&pwm_portD1;
 c1e:	89 e2       	ldi	r24, 0x29	; 41
 c20:	92 e0       	ldi	r25, 0x02	; 2
 c22:	90 93 1b 01 	sts	0x011B, r25
 c26:	80 93 1a 01 	sts	0x011A, r24
        pwm_value=&pwm_value_error;
		pwm_portB=&pwm_portB_error;
		pwm_portD=&pwm_portD_error;
		next_compare_count=2;
	  }
	  compare_count=next_compare_count;
 c2a:	80 91 28 01 	lds	r24, 0x0128
 c2e:	80 93 27 01 	sts	0x0127, r24
      
	  new_PWM=FALSE;
 c32:	10 92 2a 01 	sts	0x012A, r1
 c36:	cd cf       	rjmp	.-102    	; 0xbd2 <__vector_13+0x9c>
	  if(pwm_pointer==0){  
        pwm_value=&pwm_value1;
		pwm_portB=&pwm_portB1;
		pwm_portD=&pwm_portD1;
	  }
	  else if(pwm_pointer==1){
 c38:	81 30       	cpi	r24, 0x01	; 1
 c3a:	b1 f0       	breq	.+44     	; 0xc68 <__vector_13+0x132>
	    pwm_value=&pwm_value2;
		pwm_portB=&pwm_portB2;
		pwm_portD=&pwm_portD2;
	  }
	  else{
        pwm_value=&pwm_value_error;
 c3c:	8e e0       	ldi	r24, 0x0E	; 14
 c3e:	91 e0       	ldi	r25, 0x01	; 1
 c40:	90 93 17 01 	sts	0x0117, r25
 c44:	80 93 16 01 	sts	0x0116, r24
		pwm_portB=&pwm_portB_error;
 c48:	82 e1       	ldi	r24, 0x12	; 18
 c4a:	91 e0       	ldi	r25, 0x01	; 1
 c4c:	90 93 19 01 	sts	0x0119, r25
 c50:	80 93 18 01 	sts	0x0118, r24
		pwm_portD=&pwm_portD_error;
 c54:	84 e1       	ldi	r24, 0x14	; 20
 c56:	91 e0       	ldi	r25, 0x01	; 1
 c58:	90 93 1b 01 	sts	0x011B, r25
 c5c:	80 93 1a 01 	sts	0x011A, r24
		next_compare_count=2;
 c60:	82 e0       	ldi	r24, 0x02	; 2
 c62:	80 93 28 01 	sts	0x0128, r24
 c66:	e1 cf       	rjmp	.-62     	; 0xc2a <__vector_13+0xf4>
        pwm_value=&pwm_value1;
		pwm_portB=&pwm_portB1;
		pwm_portD=&pwm_portD1;
	  }
	  else if(pwm_pointer==1){
	    pwm_value=&pwm_value2;
 c68:	8d e1       	ldi	r24, 0x1D	; 29
 c6a:	92 e0       	ldi	r25, 0x02	; 2
 c6c:	90 93 17 01 	sts	0x0117, r25
 c70:	80 93 16 01 	sts	0x0116, r24
		pwm_portB=&pwm_portB2;
 c74:	87 e1       	ldi	r24, 0x17	; 23
 c76:	92 e0       	ldi	r25, 0x02	; 2
 c78:	90 93 19 01 	sts	0x0119, r25
 c7c:	80 93 18 01 	sts	0x0118, r24
		pwm_portD=&pwm_portD2;
 c80:	8f e2       	ldi	r24, 0x2F	; 47
 c82:	92 e0       	ldi	r25, 0x02	; 2
 c84:	90 93 1b 01 	sts	0x011B, r25
 c88:	80 93 1a 01 	sts	0x011A, r24
 c8c:	ce cf       	rjmp	.-100    	; 0xc2a <__vector_13+0xf4>

00000c8e <init_pwm>:
}


/* FUNCTIONS */
void init_pwm(){
  DDRB |= 0x03;
 c8e:	84 b1       	in	r24, 0x04	; 4
 c90:	83 60       	ori	r24, 0x03	; 3
 c92:	84 b9       	out	0x04, r24	; 4
  DDRD |= 0xE0;
 c94:	8a b1       	in	r24, 0x0a	; 10
 c96:	80 6e       	ori	r24, 0xE0	; 224
 c98:	8a b9       	out	0x0a, r24	; 10
 
  TCCR1B |= 0x01;
 c9a:	e1 e8       	ldi	r30, 0x81	; 129
 c9c:	f0 e0       	ldi	r31, 0x00	; 0
 c9e:	80 81       	ld	r24, Z
 ca0:	81 60       	ori	r24, 0x01	; 1
 ca2:	80 83       	st	Z, r24
  TIMSK1 |= 0x01;
 ca4:	ef e6       	ldi	r30, 0x6F	; 111
 ca6:	f0 e0       	ldi	r31, 0x00	; 0
 ca8:	80 81       	ld	r24, Z
 caa:	81 60       	ori	r24, 0x01	; 1
 cac:	80 83       	st	Z, r24
}
 cae:	08 95       	ret

00000cb0 <setPWM>:

void setPWM(PWM* pwm){
 cb0:	df 92       	push	r13
 cb2:	ef 92       	push	r14
 cb4:	ff 92       	push	r15
 cb6:	0f 93       	push	r16
 cb8:	1f 93       	push	r17
 cba:	cf 93       	push	r28
 cbc:	df 93       	push	r29
 cbe:	fc 01       	movw	r30, r24
  next_compare_count=pwm->compare_count;
 cc0:	90 8d       	ldd	r25, Z+24	; 0x18
 cc2:	90 93 28 01 	sts	0x0128, r25

  sum=0;
 cc6:	10 92 0a 02 	sts	0x020A, r1
 cca:	10 92 09 02 	sts	0x0209, r1

  if(pwm_pointer==0){
 cce:	80 91 29 01 	lds	r24, 0x0129
 cd2:	88 23       	and	r24, r24
 cd4:	09 f0       	breq	.+2      	; 0xcd8 <setPWM+0x28>
 cd6:	55 c0       	rjmp	.+170    	; 0xd82 <setPWM+0xd2>
    pwm_pointer=1;
 cd8:	81 e0       	ldi	r24, 0x01	; 1
 cda:	80 93 29 01 	sts	0x0129, r24
	for(int i=0;i<next_compare_count;i++){
 cde:	e9 2e       	mov	r14, r25
 ce0:	ff 24       	eor	r15, r15
 ce2:	e1 14       	cp	r14, r1
 ce4:	f1 04       	cpc	r15, r1
 ce6:	09 f4       	brne	.+2      	; 0xcea <setPWM+0x3a>
 ce8:	3e c0       	rjmp	.+124    	; 0xd66 <setPWM+0xb6>
 cea:	ef 01       	movw	r28, r30
 cec:	6d e1       	ldi	r22, 0x1D	; 29
 cee:	72 e0       	ldi	r23, 0x02	; 2
 cf0:	df 01       	movw	r26, r30
 cf2:	20 e0       	ldi	r18, 0x00	; 0
 cf4:	30 e0       	ldi	r19, 0x00	; 0
 cf6:	dd 24       	eor	r13, r13
 cf8:	d3 94       	inc	r13
 cfa:	00 e0       	ldi	r16, 0x00	; 0
 cfc:	10 e0       	ldi	r17, 0x00	; 0
 cfe:	0c c0       	rjmp	.+24     	; 0xd18 <setPWM+0x68>
      pwm_value2[i]=pwm->value[i];
	  pwm_portB2[i]=pwm->portB[i];
	  pwm_portD2[i]=pwm->portD[i];

	  sum+=pwm_value2[i];
	  if( pwm_value2[i]<50 || (pwm_portB2[i]|0x03)!=0xFF || (pwm_portD2[i]|0xE0)!=0xFF)
 d00:	52 e0       	ldi	r21, 0x02	; 2
 d02:	d5 2e       	mov	r13, r21

  sum=0;

  if(pwm_pointer==0){
    pwm_pointer=1;
	for(int i=0;i<next_compare_count;i++){
 d04:	2f 5f       	subi	r18, 0xFF	; 255
 d06:	3f 4f       	sbci	r19, 0xFF	; 255
 d08:	22 96       	adiw	r28, 0x02	; 2
 d0a:	6e 5f       	subi	r22, 0xFE	; 254
 d0c:	7f 4f       	sbci	r23, 0xFF	; 255
 d0e:	11 96       	adiw	r26, 0x01	; 1
 d10:	2e 15       	cp	r18, r14
 d12:	3f 05       	cpc	r19, r15
 d14:	0c f0       	brlt	.+2      	; 0xd18 <setPWM+0x68>
 d16:	6f c0       	rjmp	.+222    	; 0xdf6 <setPWM+0x146>
      pwm_value2[i]=pwm->value[i];
 d18:	88 81       	ld	r24, Y
 d1a:	99 81       	ldd	r25, Y+1	; 0x01
 d1c:	fb 01       	movw	r30, r22
 d1e:	91 83       	std	Z+1, r25	; 0x01
 d20:	80 83       	st	Z, r24
	  pwm_portB2[i]=pwm->portB[i];
 d22:	1c 96       	adiw	r26, 0x0c	; 12
 d24:	4c 91       	ld	r20, X
 d26:	1c 97       	sbiw	r26, 0x0c	; 12
 d28:	f9 01       	movw	r30, r18
 d2a:	e9 5e       	subi	r30, 0xE9	; 233
 d2c:	fd 4f       	sbci	r31, 0xFD	; 253
 d2e:	40 83       	st	Z, r20
	  pwm_portD2[i]=pwm->portD[i];
 d30:	52 96       	adiw	r26, 0x12	; 18
 d32:	5c 91       	ld	r21, X
 d34:	52 97       	sbiw	r26, 0x12	; 18
 d36:	f9 01       	movw	r30, r18
 d38:	e1 5d       	subi	r30, 0xD1	; 209
 d3a:	fd 4f       	sbci	r31, 0xFD	; 253
 d3c:	50 83       	st	Z, r21

	  sum+=pwm_value2[i];
 d3e:	08 0f       	add	r16, r24
 d40:	19 1f       	adc	r17, r25
	  if( pwm_value2[i]<50 || (pwm_portB2[i]|0x03)!=0xFF || (pwm_portD2[i]|0xE0)!=0xFF)
 d42:	c2 97       	sbiw	r24, 0x32	; 50
 d44:	e8 f2       	brcs	.-70     	; 0xd00 <setPWM+0x50>
 d46:	43 60       	ori	r20, 0x03	; 3
 d48:	4f 3f       	cpi	r20, 0xFF	; 255
 d4a:	d1 f6       	brne	.-76     	; 0xd00 <setPWM+0x50>
 d4c:	50 6e       	ori	r21, 0xE0	; 224
 d4e:	5f 3f       	cpi	r21, 0xFF	; 255
 d50:	b9 f6       	brne	.-82     	; 0xd00 <setPWM+0x50>
 d52:	d8 cf       	rjmp	.-80     	; 0xd04 <setPWM+0x54>
	if(sum!=TOP_VALUE)pwm_pointer=2;
    
  }
  else{
    pwm_pointer=0;
    for(int i=0;i<next_compare_count;i++){
 d54:	d0 92 29 01 	sts	0x0129, r13
 d58:	00 93 09 02 	sts	0x0209, r16
 d5c:	10 93 0a 02 	sts	0x020A, r17

	  sum+=pwm_value1[i];
	  if( pwm_value1[i]<50 || (pwm_portB1[i]|0x03)!=0xFF || (pwm_portD1[i]|0xE0)!=0xFF)
	    pwm_pointer=2;
	}
	if(sum!=TOP_VALUE)pwm_pointer=2;
 d60:	00 50       	subi	r16, 0x00	; 0
 d62:	10 44       	sbci	r17, 0x40	; 64
 d64:	19 f0       	breq	.+6      	; 0xd6c <setPWM+0xbc>
 d66:	82 e0       	ldi	r24, 0x02	; 2
 d68:	80 93 29 01 	sts	0x0129, r24
  }
  new_PWM=TRUE;
 d6c:	81 e0       	ldi	r24, 0x01	; 1
 d6e:	80 93 2a 01 	sts	0x012A, r24
}
 d72:	df 91       	pop	r29
 d74:	cf 91       	pop	r28
 d76:	1f 91       	pop	r17
 d78:	0f 91       	pop	r16
 d7a:	ff 90       	pop	r15
 d7c:	ef 90       	pop	r14
 d7e:	df 90       	pop	r13
 d80:	08 95       	ret
	}
	if(sum!=TOP_VALUE)pwm_pointer=2;
    
  }
  else{
    pwm_pointer=0;
 d82:	10 92 29 01 	sts	0x0129, r1
    for(int i=0;i<next_compare_count;i++){
 d86:	e9 2e       	mov	r14, r25
 d88:	ff 24       	eor	r15, r15
 d8a:	e1 14       	cp	r14, r1
 d8c:	f1 04       	cpc	r15, r1
 d8e:	59 f3       	breq	.-42     	; 0xd66 <setPWM+0xb6>
 d90:	ef 01       	movw	r28, r30
 d92:	6b e0       	ldi	r22, 0x0B	; 11
 d94:	72 e0       	ldi	r23, 0x02	; 2
 d96:	df 01       	movw	r26, r30
 d98:	20 e0       	ldi	r18, 0x00	; 0
 d9a:	30 e0       	ldi	r19, 0x00	; 0
 d9c:	dd 24       	eor	r13, r13
 d9e:	00 e0       	ldi	r16, 0x00	; 0
 da0:	10 e0       	ldi	r17, 0x00	; 0
 da2:	0b c0       	rjmp	.+22     	; 0xdba <setPWM+0x10a>
      pwm_value1[i]=pwm->value[i];
	  pwm_portB1[i]=pwm->portB[i];
	  pwm_portD1[i]=pwm->portD[i];

	  sum+=pwm_value1[i];
	  if( pwm_value1[i]<50 || (pwm_portB1[i]|0x03)!=0xFF || (pwm_portD1[i]|0xE0)!=0xFF)
 da4:	42 e0       	ldi	r20, 0x02	; 2
 da6:	d4 2e       	mov	r13, r20
	if(sum!=TOP_VALUE)pwm_pointer=2;
    
  }
  else{
    pwm_pointer=0;
    for(int i=0;i<next_compare_count;i++){
 da8:	2f 5f       	subi	r18, 0xFF	; 255
 daa:	3f 4f       	sbci	r19, 0xFF	; 255
 dac:	22 96       	adiw	r28, 0x02	; 2
 dae:	6e 5f       	subi	r22, 0xFE	; 254
 db0:	7f 4f       	sbci	r23, 0xFF	; 255
 db2:	11 96       	adiw	r26, 0x01	; 1
 db4:	2e 15       	cp	r18, r14
 db6:	3f 05       	cpc	r19, r15
 db8:	6c f6       	brge	.-102    	; 0xd54 <setPWM+0xa4>
      pwm_value1[i]=pwm->value[i];
 dba:	88 81       	ld	r24, Y
 dbc:	99 81       	ldd	r25, Y+1	; 0x01
 dbe:	fb 01       	movw	r30, r22
 dc0:	91 83       	std	Z+1, r25	; 0x01
 dc2:	80 83       	st	Z, r24
	  pwm_portB1[i]=pwm->portB[i];
 dc4:	1c 96       	adiw	r26, 0x0c	; 12
 dc6:	4c 91       	ld	r20, X
 dc8:	1c 97       	sbiw	r26, 0x0c	; 12
 dca:	f9 01       	movw	r30, r18
 dcc:	ed 5f       	subi	r30, 0xFD	; 253
 dce:	fd 4f       	sbci	r31, 0xFD	; 253
 dd0:	40 83       	st	Z, r20
	  pwm_portD1[i]=pwm->portD[i];
 dd2:	52 96       	adiw	r26, 0x12	; 18
 dd4:	5c 91       	ld	r21, X
 dd6:	52 97       	sbiw	r26, 0x12	; 18
 dd8:	f9 01       	movw	r30, r18
 dda:	e7 5d       	subi	r30, 0xD7	; 215
 ddc:	fd 4f       	sbci	r31, 0xFD	; 253
 dde:	50 83       	st	Z, r21

	  sum+=pwm_value1[i];
 de0:	08 0f       	add	r16, r24
 de2:	19 1f       	adc	r17, r25
	  if( pwm_value1[i]<50 || (pwm_portB1[i]|0x03)!=0xFF || (pwm_portD1[i]|0xE0)!=0xFF)
 de4:	c2 97       	sbiw	r24, 0x32	; 50
 de6:	f0 f2       	brcs	.-68     	; 0xda4 <setPWM+0xf4>
 de8:	43 60       	ori	r20, 0x03	; 3
 dea:	4f 3f       	cpi	r20, 0xFF	; 255
 dec:	d9 f6       	brne	.-74     	; 0xda4 <setPWM+0xf4>
 dee:	50 6e       	ori	r21, 0xE0	; 224
 df0:	5f 3f       	cpi	r21, 0xFF	; 255
 df2:	c1 f6       	brne	.-80     	; 0xda4 <setPWM+0xf4>
 df4:	d9 cf       	rjmp	.-78     	; 0xda8 <setPWM+0xf8>

  sum=0;

  if(pwm_pointer==0){
    pwm_pointer=1;
	for(int i=0;i<next_compare_count;i++){
 df6:	d0 92 29 01 	sts	0x0129, r13
 dfa:	10 93 0a 02 	sts	0x020A, r17
 dfe:	00 93 09 02 	sts	0x0209, r16

	  sum+=pwm_value2[i];
	  if( pwm_value2[i]<50 || (pwm_portB2[i]|0x03)!=0xFF || (pwm_portD2[i]|0xE0)!=0xFF)
	    pwm_pointer=2;
	}
	if(sum!=TOP_VALUE)pwm_pointer=2;
 e02:	00 50       	subi	r16, 0x00	; 0
 e04:	10 44       	sbci	r17, 0x40	; 64
 e06:	09 f0       	breq	.+2      	; 0xe0a <setPWM+0x15a>
 e08:	ae cf       	rjmp	.-164    	; 0xd66 <setPWM+0xb6>
 e0a:	b0 cf       	rjmp	.-160    	; 0xd6c <setPWM+0xbc>

00000e0c <spi_init>:


void spi_init(void)
{
    // Aktivieren der Pins für das SPI Interface
    DDR_SPI  |= (1<<P_SCK)|(1<<P_MOSI);
 e0c:	84 b1       	in	r24, 0x04	; 4
 e0e:	88 62       	ori	r24, 0x28	; 40
 e10:	84 b9       	out	0x04, r24	; 4
    PORT_SPI &= ~((1<<P_SCK)|(1<<P_MOSI)|(1<<P_MISO));
 e12:	85 b1       	in	r24, 0x05	; 5
 e14:	87 7c       	andi	r24, 0xC7	; 199
 e16:	85 b9       	out	0x05, r24	; 5
    
    DDR_CS   |= (1<<P_CS);
 e18:	22 9a       	sbi	0x04, 2	; 4
    PORT_CS  |= (1<<P_CS);
 e1a:	2a 9a       	sbi	0x05, 2	; 5
    
    // Aktivieren des SPI Master Interfaces, fosc = fclk / 2
    SPCR = (1<<SPE)|(1<<MSTR);
 e1c:	80 e5       	ldi	r24, 0x50	; 80
 e1e:	8c bd       	out	0x2c, r24	; 44
    SPSR = (1<<SPI2X);
 e20:	81 e0       	ldi	r24, 0x01	; 1
 e22:	8d bd       	out	0x2d, r24	; 45
}
 e24:	08 95       	ret

00000e26 <spi_putc>:

uint8_t spi_putc( uint8_t data )
{
    // Sendet ein Byte
    SPDR = data;
 e26:	8e bd       	out	0x2e, r24	; 46
    
    // Wartet bis Byte gesendet wurde
    while( !( SPSR & (1<<SPIF) ) )
 e28:	0d b4       	in	r0, 0x2d	; 45
 e2a:	07 fe       	sbrs	r0, 7
 e2c:	fd cf       	rjmp	.-6      	; 0xe28 <spi_putc+0x2>
        ;
    
    return SPDR;
 e2e:	8e b5       	in	r24, 0x2e	; 46
}
 e30:	08 95       	ret

00000e32 <__mulsi3>:
 e32:	62 9f       	mul	r22, r18
 e34:	d0 01       	movw	r26, r0
 e36:	73 9f       	mul	r23, r19
 e38:	f0 01       	movw	r30, r0
 e3a:	82 9f       	mul	r24, r18
 e3c:	e0 0d       	add	r30, r0
 e3e:	f1 1d       	adc	r31, r1
 e40:	64 9f       	mul	r22, r20
 e42:	e0 0d       	add	r30, r0
 e44:	f1 1d       	adc	r31, r1
 e46:	92 9f       	mul	r25, r18
 e48:	f0 0d       	add	r31, r0
 e4a:	83 9f       	mul	r24, r19
 e4c:	f0 0d       	add	r31, r0
 e4e:	74 9f       	mul	r23, r20
 e50:	f0 0d       	add	r31, r0
 e52:	65 9f       	mul	r22, r21
 e54:	f0 0d       	add	r31, r0
 e56:	99 27       	eor	r25, r25
 e58:	72 9f       	mul	r23, r18
 e5a:	b0 0d       	add	r27, r0
 e5c:	e1 1d       	adc	r30, r1
 e5e:	f9 1f       	adc	r31, r25
 e60:	63 9f       	mul	r22, r19
 e62:	b0 0d       	add	r27, r0
 e64:	e1 1d       	adc	r30, r1
 e66:	f9 1f       	adc	r31, r25
 e68:	bd 01       	movw	r22, r26
 e6a:	cf 01       	movw	r24, r30
 e6c:	11 24       	eor	r1, r1
 e6e:	08 95       	ret

00000e70 <__udivmodhi4>:
 e70:	aa 1b       	sub	r26, r26
 e72:	bb 1b       	sub	r27, r27
 e74:	51 e1       	ldi	r21, 0x11	; 17
 e76:	07 c0       	rjmp	.+14     	; 0xe86 <__udivmodhi4_ep>

00000e78 <__udivmodhi4_loop>:
 e78:	aa 1f       	adc	r26, r26
 e7a:	bb 1f       	adc	r27, r27
 e7c:	a6 17       	cp	r26, r22
 e7e:	b7 07       	cpc	r27, r23
 e80:	10 f0       	brcs	.+4      	; 0xe86 <__udivmodhi4_ep>
 e82:	a6 1b       	sub	r26, r22
 e84:	b7 0b       	sbc	r27, r23

00000e86 <__udivmodhi4_ep>:
 e86:	88 1f       	adc	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	5a 95       	dec	r21
 e8c:	a9 f7       	brne	.-22     	; 0xe78 <__udivmodhi4_loop>
 e8e:	80 95       	com	r24
 e90:	90 95       	com	r25
 e92:	bc 01       	movw	r22, r24
 e94:	cd 01       	movw	r24, r26
 e96:	08 95       	ret

00000e98 <__divmodsi4>:
 e98:	97 fb       	bst	r25, 7
 e9a:	09 2e       	mov	r0, r25
 e9c:	05 26       	eor	r0, r21
 e9e:	0e d0       	rcall	.+28     	; 0xebc <__divmodsi4_neg1>
 ea0:	57 fd       	sbrc	r21, 7
 ea2:	04 d0       	rcall	.+8      	; 0xeac <__divmodsi4_neg2>
 ea4:	14 d0       	rcall	.+40     	; 0xece <__udivmodsi4>
 ea6:	0a d0       	rcall	.+20     	; 0xebc <__divmodsi4_neg1>
 ea8:	00 1c       	adc	r0, r0
 eaa:	38 f4       	brcc	.+14     	; 0xeba <__divmodsi4_exit>

00000eac <__divmodsi4_neg2>:
 eac:	50 95       	com	r21
 eae:	40 95       	com	r20
 eb0:	30 95       	com	r19
 eb2:	21 95       	neg	r18
 eb4:	3f 4f       	sbci	r19, 0xFF	; 255
 eb6:	4f 4f       	sbci	r20, 0xFF	; 255
 eb8:	5f 4f       	sbci	r21, 0xFF	; 255

00000eba <__divmodsi4_exit>:
 eba:	08 95       	ret

00000ebc <__divmodsi4_neg1>:
 ebc:	f6 f7       	brtc	.-4      	; 0xeba <__divmodsi4_exit>
 ebe:	90 95       	com	r25
 ec0:	80 95       	com	r24
 ec2:	70 95       	com	r23
 ec4:	61 95       	neg	r22
 ec6:	7f 4f       	sbci	r23, 0xFF	; 255
 ec8:	8f 4f       	sbci	r24, 0xFF	; 255
 eca:	9f 4f       	sbci	r25, 0xFF	; 255
 ecc:	08 95       	ret

00000ece <__udivmodsi4>:
 ece:	a1 e2       	ldi	r26, 0x21	; 33
 ed0:	1a 2e       	mov	r1, r26
 ed2:	aa 1b       	sub	r26, r26
 ed4:	bb 1b       	sub	r27, r27
 ed6:	fd 01       	movw	r30, r26
 ed8:	0d c0       	rjmp	.+26     	; 0xef4 <__udivmodsi4_ep>

00000eda <__udivmodsi4_loop>:
 eda:	aa 1f       	adc	r26, r26
 edc:	bb 1f       	adc	r27, r27
 ede:	ee 1f       	adc	r30, r30
 ee0:	ff 1f       	adc	r31, r31
 ee2:	a2 17       	cp	r26, r18
 ee4:	b3 07       	cpc	r27, r19
 ee6:	e4 07       	cpc	r30, r20
 ee8:	f5 07       	cpc	r31, r21
 eea:	20 f0       	brcs	.+8      	; 0xef4 <__udivmodsi4_ep>
 eec:	a2 1b       	sub	r26, r18
 eee:	b3 0b       	sbc	r27, r19
 ef0:	e4 0b       	sbc	r30, r20
 ef2:	f5 0b       	sbc	r31, r21

00000ef4 <__udivmodsi4_ep>:
 ef4:	66 1f       	adc	r22, r22
 ef6:	77 1f       	adc	r23, r23
 ef8:	88 1f       	adc	r24, r24
 efa:	99 1f       	adc	r25, r25
 efc:	1a 94       	dec	r1
 efe:	69 f7       	brne	.-38     	; 0xeda <__udivmodsi4_loop>
 f00:	60 95       	com	r22
 f02:	70 95       	com	r23
 f04:	80 95       	com	r24
 f06:	90 95       	com	r25
 f08:	9b 01       	movw	r18, r22
 f0a:	ac 01       	movw	r20, r24
 f0c:	bd 01       	movw	r22, r26
 f0e:	cf 01       	movw	r24, r30
 f10:	08 95       	ret

00000f12 <_exit>:
 f12:	f8 94       	cli

00000f14 <__stop_program>:
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <__stop_program>
